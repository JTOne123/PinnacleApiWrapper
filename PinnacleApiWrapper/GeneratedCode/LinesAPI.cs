//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.13.2.0 (NJsonSchema v9.10.21.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace PinnacleApiWrapper
{
    #pragma warning disable // Disable all warnings

    public partial class PinnacleWrapper 
    {
        /// <summary>Get Fixtures - v1</summary>
        /// <param name="sportId">The sport id to retrieve the fixutres for.</param>
        /// <param name="leagueIds">The leagueIds array may contain a list of comma separated league ids.</param>
        /// <param name="isLive">To retrieve ONLY live events set the value to 1 (isLive=1). Missing or any other value will result in retrieval of events regardless of their Live status.</param>
        /// <param name="since">This is used to receive incremental updates. Use the value of last from previous fixtures response. When since parameter is not provided, the fixtures are delayed up to 1 minute to encourage the use of the parameter.</param>
        /// <param name="eventIds">Comma separated list of event ids to filter by</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FixturesResponse> GetAsync(int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, bool? isLive, long? since, System.Collections.Generic.IEnumerable<int> eventIds)
        {
            return GetAsync(sportId, leagueIds, isLive, since, eventIds, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Fixtures - v1</summary>
        /// <param name="sportId">The sport id to retrieve the fixutres for.</param>
        /// <param name="leagueIds">The leagueIds array may contain a list of comma separated league ids.</param>
        /// <param name="isLive">To retrieve ONLY live events set the value to 1 (isLive=1). Missing or any other value will result in retrieval of events regardless of their Live status.</param>
        /// <param name="since">This is used to receive incremental updates. Use the value of last from previous fixtures response. When since parameter is not provided, the fixtures are delayed up to 1 minute to encourage the use of the parameter.</param>
        /// <param name="eventIds">Comma separated list of event ids to filter by</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<FixturesResponse> GetAsync(int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, bool? isLive, long? since, System.Collections.Generic.IEnumerable<int> eventIds, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/fixtures?");
            urlBuilder_.Append("sportId=").Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (leagueIds != null) foreach (var item_ in leagueIds) { urlBuilder_.Append("leagueIds=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (isLive != null) urlBuilder_.Append("isLive=").Append(System.Uri.EscapeDataString(ConvertToString(isLive, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (eventIds != null) foreach (var item_ in eventIds) { urlBuilder_.Append("eventIds=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(FixturesResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<FixturesResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(FixturesResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Special Fixtures - v1</summary>
        /// <param name="sportId">Id of a sport for which to retrieve the specials.</param>
        /// <param name="leagueIds">The leagueIds array may contain a list of comma separated league ids.</param>
        /// <param name="since">This is used to receive incremental updates. Use the value of last field from the previous response. When since parameter is not provided, the fixtures are delayed up to 1 min to encourage the use of the parameter.</param>
        /// <param name="category">The category the special falls under.</param>
        /// <param name="eventId">Id of an event associated with a special.</param>
        /// <param name="specialId">Id of the special.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SpecialsFixturesResponse> GetAsync(int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, long? since, string category, long? eventId, long? specialId)
        {
            return GetAsync(sportId, leagueIds, since, category, eventId, specialId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Special Fixtures - v1</summary>
        /// <param name="sportId">Id of a sport for which to retrieve the specials.</param>
        /// <param name="leagueIds">The leagueIds array may contain a list of comma separated league ids.</param>
        /// <param name="since">This is used to receive incremental updates. Use the value of last field from the previous response. When since parameter is not provided, the fixtures are delayed up to 1 min to encourage the use of the parameter.</param>
        /// <param name="category">The category the special falls under.</param>
        /// <param name="eventId">Id of an event associated with a special.</param>
        /// <param name="specialId">Id of the special.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SpecialsFixturesResponse> GetAsync(int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, long? since, string category, long? eventId, long? specialId, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/fixtures/special?");
            urlBuilder_.Append("sportId=").Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (leagueIds != null) foreach (var item_ in leagueIds) { urlBuilder_.Append("leagueIds=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (category != null) urlBuilder_.Append("category=").Append(System.Uri.EscapeDataString(ConvertToString(category, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (eventId != null) urlBuilder_.Append("eventId=").Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (specialId != null) urlBuilder_.Append("specialId=").Append(System.Uri.EscapeDataString(ConvertToString(specialId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SpecialsFixturesResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialsFixturesResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SpecialsFixturesResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Settled Fixtures - v1</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SettledFixturesSport> GetAsync(int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, int? since)
        {
            return GetAsync(sportId, leagueIds, since, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Settled Fixtures - v1</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SettledFixturesSport> GetAsync(int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, int? since, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/fixtures/settled?");
            urlBuilder_.Append("sportId=").Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (leagueIds != null) foreach (var item_ in leagueIds) { urlBuilder_.Append("leagueIds=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SettledFixturesSport); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SettledFixturesSport>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SettledFixturesSport);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Settled Special Fixtures - v1</summary>
        /// <param name="sportId">Id of the sport for which to retrieve the settled specials.</param>
        /// <param name="leagueIds">Array of leagueIds. This is optional parameter.</param>
        /// <param name="since">This is used to receive incremental updates. Use the value of last from previous response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SettledSpecialsResponse> GetAsync(int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, long? since)
        {
            return GetAsync(sportId, leagueIds, since, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Settled Special Fixtures - v1</summary>
        /// <param name="sportId">Id of the sport for which to retrieve the settled specials.</param>
        /// <param name="leagueIds">Array of leagueIds. This is optional parameter.</param>
        /// <param name="since">This is used to receive incremental updates. Use the value of last from previous response.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SettledSpecialsResponse> GetAsync(int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, long? since, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/fixtures/special/settled?");
            urlBuilder_.Append("sportId=").Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (leagueIds != null) foreach (var item_ in leagueIds) { urlBuilder_.Append("leagueIds=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SettledSpecialsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SettledSpecialsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SettledSpecialsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Straight Odds - v1</summary>
        /// <param name="sportId">The sportid for which to retrieve the odds.</param>
        /// <param name="leagueIds">The leagueIds array may contain a list of comma separated league ids.</param>
        /// <param name="oddsFormat">Format in which we return the odds. Default is American. [American, Decimal, HongKong, Indonesian, Malay]</param>
        /// <param name="since">This is used to receive incremental updates. Use the value of last from previous odds response. When since parameter is not provided, the odds are delayed up to 1 min to encourage the use of the parameter. Please note that when using since parameter you will get in the response ONLY changed periods. If a period did not have any changes it will not be in the response.</param>
        /// <param name="isLive">To retrieve ONLY live odds set the value to 1 (isLive=1). Otherwise response will have all odds.</param>
        /// <param name="eventIds">Filter by EventIds</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<OddsResponse> GetAsync(int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, OddsFormat? oddsFormat, long? since, bool? isLive, System.Collections.Generic.IEnumerable<long> eventIds)
        {
            return GetAsync(sportId, leagueIds, oddsFormat, since, isLive, eventIds, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Straight Odds - v1</summary>
        /// <param name="sportId">The sportid for which to retrieve the odds.</param>
        /// <param name="leagueIds">The leagueIds array may contain a list of comma separated league ids.</param>
        /// <param name="oddsFormat">Format in which we return the odds. Default is American. [American, Decimal, HongKong, Indonesian, Malay]</param>
        /// <param name="since">This is used to receive incremental updates. Use the value of last from previous odds response. When since parameter is not provided, the odds are delayed up to 1 min to encourage the use of the parameter. Please note that when using since parameter you will get in the response ONLY changed periods. If a period did not have any changes it will not be in the response.</param>
        /// <param name="isLive">To retrieve ONLY live odds set the value to 1 (isLive=1). Otherwise response will have all odds.</param>
        /// <param name="eventIds">Filter by EventIds</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<OddsResponse> GetAsync(int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, OddsFormat? oddsFormat, long? since, bool? isLive, System.Collections.Generic.IEnumerable<long> eventIds, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/odds?");
            urlBuilder_.Append("sportId=").Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (leagueIds != null) foreach (var item_ in leagueIds) { urlBuilder_.Append("leagueIds=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (oddsFormat != null) urlBuilder_.Append("oddsFormat=").Append(System.Uri.EscapeDataString(ConvertToString(oddsFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isLive != null) urlBuilder_.Append("isLive=").Append(System.Uri.EscapeDataString(ConvertToString(isLive, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (eventIds != null) foreach (var item_ in eventIds) { urlBuilder_.Append("eventIds=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(OddsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<OddsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(OddsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Parlay Odds - v1</summary>
        /// <param name="sportId">The sportid for which to retrieve the odds.</param>
        /// <param name="leagueIds">The leagueIds array may contain a list of comma separated league ids.</param>
        /// <param name="oddsFormat">Format in which we return the odds. Default is American. [American, Decimal, HongKong, Indonesian, Malay]</param>
        /// <param name="since">This is used to receive incremental updates. Use the value of last from previous odds response. When since parameter is not provided, the odds are delayed up to 1 min to encourage the use of the parameter. Please note that when using since parameter you will get in the response ONLY changed periods. If a period didn’t have any changes it will not be in the response.</param>
        /// <param name="isLive">To retrieve ONLY live odds set the value to 1 (isLive=1). Otherwise response will have all odds.</param>
        /// <param name="eventIds">Filter by EventIds</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParlayOddsResponse> GetAsync(int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, OddsFormat2? oddsFormat, long? since, bool? isLive, System.Collections.Generic.IEnumerable<long> eventIds)
        {
            return GetAsync(sportId, leagueIds, oddsFormat, since, isLive, eventIds, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Parlay Odds - v1</summary>
        /// <param name="sportId">The sportid for which to retrieve the odds.</param>
        /// <param name="leagueIds">The leagueIds array may contain a list of comma separated league ids.</param>
        /// <param name="oddsFormat">Format in which we return the odds. Default is American. [American, Decimal, HongKong, Indonesian, Malay]</param>
        /// <param name="since">This is used to receive incremental updates. Use the value of last from previous odds response. When since parameter is not provided, the odds are delayed up to 1 min to encourage the use of the parameter. Please note that when using since parameter you will get in the response ONLY changed periods. If a period didn’t have any changes it will not be in the response.</param>
        /// <param name="isLive">To retrieve ONLY live odds set the value to 1 (isLive=1). Otherwise response will have all odds.</param>
        /// <param name="eventIds">Filter by EventIds</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ParlayOddsResponse> GetAsync(int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, OddsFormat2? oddsFormat, long? since, bool? isLive, System.Collections.Generic.IEnumerable<long> eventIds, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/odds/parlay?");
            urlBuilder_.Append("sportId=").Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (leagueIds != null) foreach (var item_ in leagueIds) { urlBuilder_.Append("leagueIds=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (oddsFormat != null) urlBuilder_.Append("oddsFormat=").Append(System.Uri.EscapeDataString(ConvertToString(oddsFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (isLive != null) urlBuilder_.Append("isLive=").Append(System.Uri.EscapeDataString(ConvertToString(isLive, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (eventIds != null) foreach (var item_ in eventIds) { urlBuilder_.Append("eventIds=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ParlayOddsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayOddsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ParlayOddsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Teaser Odds - v1</summary>
        /// <param name="teaserId">Unique identifier.Teaser details can be retrieved from a call to Get Teaser Groups endpoint.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TeaserOddsResponse> GetAsync(long teaserId)
        {
            return GetAsync(teaserId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Teaser Odds - v1</summary>
        /// <param name="teaserId">Unique identifier.Teaser details can be retrieved from a call to Get Teaser Groups endpoint.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TeaserOddsResponse> GetAsync(long teaserId, System.Threading.CancellationToken cancellationToken)
        {
            if (teaserId == null)
                throw new System.ArgumentNullException("teaserId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/odds/teaser?");
            urlBuilder_.Append("teaserId=").Append(System.Uri.EscapeDataString(ConvertToString(teaserId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(TeaserOddsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserOddsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(TeaserOddsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Special Odds - v1</summary>
        /// <param name="oddsFormat">Format the odds are returned in. [American, Decimal, HongKong, Indonesian, Malay]</param>
        /// <param name="sportId">Id of a sport for which to retrieve the specials.</param>
        /// <param name="leagueIds">The leagueIds array may contain a list of comma separated league ids.</param>
        /// <param name="since">This is used to receive incremental updates. Use the value of last from previous response. When since parameter is not provided, the fixtures are delayed up to 1 min to encourage the use of the parameter.</param>
        /// <param name="specialId">Id of the special. This is an optional argument.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SpecialOddsResponse> GetAsync(OddsFormat3? oddsFormat, int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, long? since, long? specialId)
        {
            return GetAsync(oddsFormat, sportId, leagueIds, since, specialId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Special Odds - v1</summary>
        /// <param name="oddsFormat">Format the odds are returned in. [American, Decimal, HongKong, Indonesian, Malay]</param>
        /// <param name="sportId">Id of a sport for which to retrieve the specials.</param>
        /// <param name="leagueIds">The leagueIds array may contain a list of comma separated league ids.</param>
        /// <param name="since">This is used to receive incremental updates. Use the value of last from previous response. When since parameter is not provided, the fixtures are delayed up to 1 min to encourage the use of the parameter.</param>
        /// <param name="specialId">Id of the special. This is an optional argument.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SpecialOddsResponse> GetAsync(OddsFormat3? oddsFormat, int sportId, System.Collections.Generic.IEnumerable<int> leagueIds, long? since, long? specialId, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/odds/special?");
            if (oddsFormat != null) urlBuilder_.Append("oddsFormat=").Append(System.Uri.EscapeDataString(ConvertToString(oddsFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("sportId=").Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (leagueIds != null) foreach (var item_ in leagueIds) { urlBuilder_.Append("leagueIds=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (since != null) urlBuilder_.Append("since=").Append(System.Uri.EscapeDataString(ConvertToString(since, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (specialId != null) urlBuilder_.Append("specialId=").Append(System.Uri.EscapeDataString(ConvertToString(specialId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SpecialOddsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialOddsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SpecialOddsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Straight Line - v1</summary>
        /// <param name="leagueId">League Id.</param>
        /// <param name="handicap">This is needed for SPREAD, TOTAL_POINTS and TEAM_TOTAL_POINTS bet types</param>
        /// <param name="oddsFormat">Format in which we return the odds. Default is American.</param>
        /// <param name="sportId">Sport identification</param>
        /// <param name="eventId">Event identification</param>
        /// <param name="periodNumber">This represents the period of the match. For example, for soccer we have 0 (Game),  1 (1st Half) & 2 (2nd Half)</param>
        /// <param name="betType">Bet Type</param>
        /// <param name="team">Chosen team type. This is needed only for SPREAD, MONEYLINE and TEAM_TOTAL_POINTS bet types</param>
        /// <param name="side">Chosen side. This is needed only for TOTAL_POINTS and TEAM_TOTAL_POINTS</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<LineResponse> GetAsync(int leagueId, double handicap, OddsFormat4 oddsFormat, int sportId, long eventId, int periodNumber, BetType betType, Team? team, Side? side)
        {
            return GetAsync(leagueId, handicap, oddsFormat, sportId, eventId, periodNumber, betType, team, side, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Straight Line - v1</summary>
        /// <param name="leagueId">League Id.</param>
        /// <param name="handicap">This is needed for SPREAD, TOTAL_POINTS and TEAM_TOTAL_POINTS bet types</param>
        /// <param name="oddsFormat">Format in which we return the odds. Default is American.</param>
        /// <param name="sportId">Sport identification</param>
        /// <param name="eventId">Event identification</param>
        /// <param name="periodNumber">This represents the period of the match. For example, for soccer we have 0 (Game),  1 (1st Half) & 2 (2nd Half)</param>
        /// <param name="betType">Bet Type</param>
        /// <param name="team">Chosen team type. This is needed only for SPREAD, MONEYLINE and TEAM_TOTAL_POINTS bet types</param>
        /// <param name="side">Chosen side. This is needed only for TOTAL_POINTS and TEAM_TOTAL_POINTS</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<LineResponse> GetAsync(int leagueId, double handicap, OddsFormat4 oddsFormat, int sportId, long eventId, int periodNumber, BetType betType, Team? team, Side? side, System.Threading.CancellationToken cancellationToken)
        {
            if (leagueId == null)
                throw new System.ArgumentNullException("leagueId");
    
            if (handicap == null)
                throw new System.ArgumentNullException("handicap");
    
            if (oddsFormat == null)
                throw new System.ArgumentNullException("oddsFormat");
    
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");
    
            if (eventId == null)
                throw new System.ArgumentNullException("eventId");
    
            if (periodNumber == null)
                throw new System.ArgumentNullException("periodNumber");
    
            if (betType == null)
                throw new System.ArgumentNullException("betType");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/line?");
            urlBuilder_.Append("leagueId=").Append(System.Uri.EscapeDataString(ConvertToString(leagueId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("handicap=").Append(System.Uri.EscapeDataString(ConvertToString(handicap, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("oddsFormat=").Append(System.Uri.EscapeDataString(ConvertToString(oddsFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("sportId=").Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("eventId=").Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("periodNumber=").Append(System.Uri.EscapeDataString(ConvertToString(periodNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("betType=").Append(System.Uri.EscapeDataString(ConvertToString(betType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (team != null) urlBuilder_.Append("team=").Append(System.Uri.EscapeDataString(ConvertToString(team, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (side != null) urlBuilder_.Append("side=").Append(System.Uri.EscapeDataString(ConvertToString(side, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(LineResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<LineResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(LineResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Parlay Line - v1</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ParlayLinesResponse> PostAsync(ParlayLinesRequest request)
        {
            return PostAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Parlay Line - v1</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ParlayLinesResponse> PostAsync(ParlayLinesRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/line/parlay");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ParlayLinesResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayLinesResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(ParlayLinesResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Teaser Line - v1</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TeaserLinesResponse> PostAsync(LinesRequestTeaser teaserLinesRequest)
        {
            return PostAsync(teaserLinesRequest, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Teaser Line - v1</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TeaserLinesResponse> PostAsync(LinesRequestTeaser teaserLinesRequest, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/line/teaser");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(teaserLinesRequest, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(TeaserLinesResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserLinesResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(TeaserLinesResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Special Line - v1</summary>
        /// <param name="oddsFormat">Format the odds are returned in. [American, Decimal, HongKong, Indonesian, Malay]</param>
        /// <param name="specialId">Id of the special.</param>
        /// <param name="contestantId">Id of the contestant.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SpecialLineResponse> GetAsync(OddsFormat5 oddsFormat, long specialId, long contestantId)
        {
            return GetAsync(oddsFormat, specialId, contestantId, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Special Line - v1</summary>
        /// <param name="oddsFormat">Format the odds are returned in. [American, Decimal, HongKong, Indonesian, Malay]</param>
        /// <param name="specialId">Id of the special.</param>
        /// <param name="contestantId">Id of the contestant.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SpecialLineResponse> GetAsync(OddsFormat5 oddsFormat, long specialId, long contestantId, System.Threading.CancellationToken cancellationToken)
        {
            if (oddsFormat == null)
                throw new System.ArgumentNullException("oddsFormat");
    
            if (specialId == null)
                throw new System.ArgumentNullException("specialId");
    
            if (contestantId == null)
                throw new System.ArgumentNullException("contestantId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/line/special?");
            urlBuilder_.Append("oddsFormat=").Append(System.Uri.EscapeDataString(ConvertToString(oddsFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("specialId=").Append(System.Uri.EscapeDataString(ConvertToString(specialId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("contestantId=").Append(System.Uri.EscapeDataString(ConvertToString(contestantId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SpecialLineResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialLineResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SpecialLineResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Periods - v1</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SportPeriod> GetAsyncSportPeriod(string sportId)
        {
            return GetAsyncSportPeriod(sportId, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Periods - v1</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SportPeriod> GetAsyncSportPeriod(string sportId, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/periods?");
            urlBuilder_.Append("sportId=").Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SportPeriod); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SportPeriod>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SportPeriod);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get In-Running - v1</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<InRunningResponse> GetAsyncInRunningResponse()
        {
            return GetAsyncInRunningResponse(System.Threading.CancellationToken.None);
        }

        /// <summary>Get In-Running - v1</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<InRunningResponse> GetAsyncInRunningResponse(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/inrunning");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(InRunningResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<InRunningResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedLinesErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedLinesErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedLinesErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(InRunningResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Get Teaser Groups - v1</summary>
        /// <param name="oddsFormat">Format the odds are returned in. [American, Decimal, HongKong, Indonesian, Malay]</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TeaserGroupsResponse> GetAsync(OddsFormat6 oddsFormat)
        {
            return GetAsync(oddsFormat, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Teaser Groups - v1</summary>
        /// <param name="oddsFormat">Format the odds are returned in. [American, Decimal, HongKong, Indonesian, Malay]</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TeaserGroupsResponse> GetAsync(OddsFormat6 oddsFormat, System.Threading.CancellationToken cancellationToken)
        {
            if (oddsFormat == null)
                throw new System.ArgumentNullException("oddsFormat");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/teaser/groups?");
            urlBuilder_.Append("oddsFormat=").Append(System.Uri.EscapeDataString(ConvertToString(oddsFormat, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(TeaserGroupsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserGroupsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(TeaserGroupsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Cancellation Reasons - v1</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CancellationReasonResponse> GetAsyncCancellationReasonResponse()
        {
            return GetAsyncCancellationReasonResponse(System.Threading.CancellationToken.None);
        }

        /// <summary>Get Cancellation Reasons - v1</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CancellationReasonResponse> GetAsyncCancellationReasonResponse(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/cancellationreasons");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CancellationReasonResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CancellationReasonResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CancellationReasonResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    }
    
    public partial class PinnacleWrapper 
    {
        /// <summary>Get Sports - v2</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SportsResponse> GetAsyncSportsResponse()
        {
            return GetAsyncSportsResponse(System.Threading.CancellationToken.None);
        }

        /// <summary>Get Sports - v2</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SportsResponse> GetAsyncSportsResponse(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/sports");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SportsResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SportsResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(LinesErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<LinesErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<LinesErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SportsResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Leagues - v2</summary>
        /// <param name="sportId">Sport id for which the leagues are requested.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Leagues> GetAsyncLeagues(string sportId)
        {
            return GetAsyncLeagues(sportId, System.Threading.CancellationToken.None);
        }

        /// <summary>Get Leagues - v2</summary>
        /// <param name="sportId">Sport id for which the leagues are requested.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Leagues> GetAsyncLeagues(string sportId, System.Threading.CancellationToken cancellationToken)
        {
            if (sportId == null)
                throw new System.ArgumentNullException("sportId");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/leagues?");
            urlBuilder_.Append("sportId=").Append(System.Uri.EscapeDataString(ConvertToString(sportId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Leagues); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Leagues>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Leagues);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get Currencies - v2</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SuccessfulCurrenciesResponse> GetAsyncSuccessfulCurrenciesResponse()
        {
            return GetAsyncSuccessfulCurrenciesResponse(System.Threading.CancellationToken.None);
        }

        /// <summary>Get Currencies - v2</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<SuccessfulCurrenciesResponse> GetAsyncSuccessfulCurrenciesResponse(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/currencies");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(SuccessfulCurrenciesResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<SuccessfulCurrenciesResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ExtendedErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ExtendedErrorResponse>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(SuccessfulCurrenciesResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExtendedErrorResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private string _ref;
        private string _code;
        private string _message;
    
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set 
            {
                if (_ref != value)
                {
                    _ref = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtendedErrorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedErrorResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LinesErrorResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private string _status;
        private ErrorResponse _error;
        private int? _code;
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error
        {
            get { return _error; }
            set 
            {
                if (_error != value)
                {
                    _error = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Code identifying an error that occurred.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LinesErrorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LinesErrorResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ExtendedLinesErrorResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private string _ref;
        private string _status;
        private ErrorResponse _error;
        private int? _code;
    
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set 
            {
                if (_ref != value)
                {
                    _ref = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorResponse Error
        {
            get { return _error; }
            set 
            {
                if (_error != value)
                {
                    _error = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Code identifying an error that occurred.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ExtendedLinesErrorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExtendedLinesErrorResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Cancellation Response Data</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CancellationReasonResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<CancellationReason> _cancellationReasons;
    
        /// <summary>Contains a list of Cancellation Reasons.</summary>
        [Newtonsoft.Json.JsonProperty("cancellationReasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<CancellationReason> CancellationReasons
        {
            get { return _cancellationReasons; }
            set 
            {
                if (_cancellationReasons != value)
                {
                    _cancellationReasons = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CancellationReasonResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancellationReasonResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
      
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SuccessfulCurrenciesResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Currency> _currencies;
    
        /// <summary>Currencies container.</summary>
        [Newtonsoft.Json.JsonProperty("currencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Currency> Currencies
        {
            get { return _currencies; }
            set 
            {
                if (_currencies != value)
                {
                    _currencies = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SuccessfulCurrenciesResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SuccessfulCurrenciesResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Currency : System.ComponentModel.INotifyPropertyChanged
    {
        private string _code;
        private string _name;
        private double? _rate;
    
        /// <summary>Currency code.</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Currency name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Exchange rate to USD.</summary>
        [Newtonsoft.Json.JsonProperty("rate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Rate
        {
            get { return _rate; }
            set 
            {
                if (_rate != value)
                {
                    _rate = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Currency FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Currency>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FixturesResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _sportId;
        private long? _last;
        private System.Collections.ObjectModel.ObservableCollection<FixturesLeague> _league;
    
        /// <summary>Same as requested sport Id.</summary>
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Use this value for the subsequent requests for since query parameter to get just the changes since previous response.</summary>
        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Last
        {
            get { return _last; }
            set 
            {
                if (_last != value)
                {
                    _last = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contains a list of Leagues.</summary>
        [Newtonsoft.Json.JsonProperty("league", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<FixturesLeague> League
        {
            get { return _league; }
            set 
            {
                if (_league != value)
                {
                    _league = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FixturesResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FixturesResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FixturesLeague : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _name;
        private System.Collections.ObjectModel.ObservableCollection<Fixture> _events;
    
        /// <summary>League ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>League Name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contains a list of events.</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Fixture> Events
        {
            get { return _events; }
            set 
            {
                if (_events != value)
                {
                    _events = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FixturesLeague FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FixturesLeague>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Fixture : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private System.DateTime? _starts;
        private string _home;
        private string _away;
        private string _rotNum;
        private FixtureLiveStatus? _liveStatus;
        private string _homePitcher;
        private string _awayPitcher;
        private FixtureStatus? _status;
        private FixtureParlayRestriction? _parlayRestriction;
    
        /// <summary>Event ID.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Start time of the event in UTC.</summary>
        [Newtonsoft.Json.JsonProperty("starts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Starts
        {
            get { return _starts; }
            set 
            {
                if (_starts != value)
                {
                    _starts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Home team name.</summary>
        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Home
        {
            get { return _home; }
            set 
            {
                if (_home != value)
                {
                    _home = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Away team name.</summary>
        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Away
        {
            get { return _away; }
            set 
            {
                if (_away != value)
                {
                    _away = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Team1 rotation number.</summary>
        [Newtonsoft.Json.JsonProperty("rotNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RotNum
        {
            get { return _rotNum; }
            set 
            {
                if (_rotNum != value)
                {
                    _rotNum = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Indicates live status of the event. 
        /// 
        /// 0 = No live betting will be offered on this event, 
        /// 1 = Live betting event, 
        /// 2 = Live betting will be offered on this event
        /// </summary>
        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FixtureLiveStatus? LiveStatus
        {
            get { return _liveStatus; }
            set 
            {
                if (_liveStatus != value)
                {
                    _liveStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Home team pitcher. Only for Baseball.</summary>
        [Newtonsoft.Json.JsonProperty("homePitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HomePitcher
        {
            get { return _homePitcher; }
            set 
            {
                if (_homePitcher != value)
                {
                    _homePitcher = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Away team pitcher. Only for Baseball.</summary>
        [Newtonsoft.Json.JsonProperty("awayPitcher", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AwayPitcher
        {
            get { return _awayPitcher; }
            set 
            {
                if (_awayPitcher != value)
                {
                    _awayPitcher = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>
        /// Status of the event. 
        /// 
        /// O = This is the starting status of a game. It means that the lines are open for betting, 
        /// H = This status indicates that the lines are temporarily unavailable for betting, 
        /// I = This status indicates that one or more lines have a red circle (lower maximum bet amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FixtureStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>
        /// Parlay status of the event. 
        /// 
        /// 0 = Allowed to parlay, without restrictions, 
        /// 1 = Not allowed to parlay this event, 
        /// 2 = Allowed to parlay with the restrictions. You can not have more than one leg from the same event in the parlay. All events with the same rotation number are treated as same event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parlayRestriction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FixtureParlayRestriction? ParlayRestriction
        {
            get { return _parlayRestriction; }
            set 
            {
                if (_parlayRestriction != value)
                {
                    _parlayRestriction = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Fixture FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Fixture>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SettledFixturesSport : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _sportId;
        private long? _last;
        private System.Collections.ObjectModel.ObservableCollection<SettledFixturesLeague> _leagues;
    
        /// <summary>Same as requested sport Id.</summary>
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Use this value for the subsequent requests for since query parameter to get just the changes since previous response.</summary>
        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Last
        {
            get { return _last; }
            set 
            {
                if (_last != value)
                {
                    _last = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contains a list of Leagues.</summary>
        [Newtonsoft.Json.JsonProperty("leagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SettledFixturesLeague> Leagues
        {
            get { return _leagues; }
            set 
            {
                if (_leagues != value)
                {
                    _leagues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SettledFixturesSport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SettledFixturesSport>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SettledFixturesLeague : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private System.Collections.ObjectModel.ObservableCollection<SettledFixturesEvent> _events;
    
        /// <summary>League Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contains a list of events.</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SettledFixturesEvent> Events
        {
            get { return _events; }
            set 
            {
                if (_events != value)
                {
                    _events = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SettledFixturesLeague FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SettledFixturesLeague>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SettledFixturesEvent : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private System.Collections.ObjectModel.ObservableCollection<SettledFixturesPeriod> _periods;
    
        /// <summary>Event Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contains a list of periods.</summary>
        [Newtonsoft.Json.JsonProperty("periods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SettledFixturesPeriod> Periods
        {
            get { return _periods; }
            set 
            {
                if (_periods != value)
                {
                    _periods = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SettledFixturesEvent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SettledFixturesEvent>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SettledFixturesPeriod : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _number;
        private SettledFixturesPeriodStatus? _status;
        private long? _settlementId;
        private System.DateTime? _settledAt;
        private int? _team1Score;
        private int? _team2Score;
        private CancellationReasonType _cancellationReason;
    
        /// <summary>This represents the period of the match. For example, for soccer we have 0 (Game), 1 (1st Half) & 2 (2nd Half)</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Period settlement status. 
        /// 
        /// 1 = Event period is settled, 
        /// 2 = Event period is re-settled, 
        /// 3 = Event period is cancelled, 
        /// 4 = Event period is re-settled as cancelled, 
        /// 5 = Event is deleted
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SettledFixturesPeriodStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique id of the settlement. In case of a re-settlement, a new settlementId and settledAt will be generated.</summary>
        [Newtonsoft.Json.JsonProperty("settlementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SettlementId
        {
            get { return _settlementId; }
            set 
            {
                if (_settlementId != value)
                {
                    _settlementId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Date and time in UTC when the period was settled.</summary>
        [Newtonsoft.Json.JsonProperty("settledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? SettledAt
        {
            get { return _settledAt; }
            set 
            {
                if (_settledAt != value)
                {
                    _settledAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Team1 score.</summary>
        [Newtonsoft.Json.JsonProperty("team1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Team1Score
        {
            get { return _team1Score; }
            set 
            {
                if (_team1Score != value)
                {
                    _team1Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Team2 score.</summary>
        [Newtonsoft.Json.JsonProperty("team2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Team2Score
        {
            get { return _team2Score; }
            set 
            {
                if (_team2Score != value)
                {
                    _team2Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReasonType CancellationReason
        {
            get { return _cancellationReason; }
            set 
            {
                if (_cancellationReason != value)
                {
                    _cancellationReason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SettledFixturesPeriod FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SettledFixturesPeriod>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CancellationReasonType : System.ComponentModel.INotifyPropertyChanged
    {
        private string _code;
        private CancellationReasonDetailsType _details;
    
        /// <summary>Cancellation Reason Code</summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReasonDetailsType Details
        {
            get { return _details; }
            set 
            {
                if (_details != value)
                {
                    _details = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CancellationReasonType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancellationReasonType>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CancellationReasonDetailsType : System.ComponentModel.INotifyPropertyChanged
    {
        private string _key;
        private string _value;
    
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set 
            {
                if (_key != value)
                {
                    _key = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set 
            {
                if (_value != value)
                {
                    _value = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CancellationReasonDetailsType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancellationReasonDetailsType>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InRunningResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<InRunningSport> _sports;
    
        /// <summary>Sports container</summary>
        [Newtonsoft.Json.JsonProperty("sports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InRunningSport> Sports
        {
            get { return _sports; }
            set 
            {
                if (_sports != value)
                {
                    _sports = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InRunningResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InRunningResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InRunningSport : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private System.Collections.ObjectModel.ObservableCollection<InRunningLeague> _leagues;
    
        /// <summary>Sport Id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Leagues container</summary>
        [Newtonsoft.Json.JsonProperty("leagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InRunningLeague> Leagues
        {
            get { return _leagues; }
            set 
            {
                if (_leagues != value)
                {
                    _leagues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InRunningSport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InRunningSport>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InRunningLeague : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private System.Collections.ObjectModel.ObservableCollection<InRunningEvent> _events;
    
        /// <summary>League Id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Events container</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<InRunningEvent> Events
        {
            get { return _events; }
            set 
            {
                if (_events != value)
                {
                    _events = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InRunningLeague FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InRunningLeague>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class InRunningEvent : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private InRunningEventState? _state;
        private int? _elapsed;
    
        /// <summary>Game Id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>State of the game.
        /// 
        /// 1 = First half in progress, 
        /// 2 = Half time in progress, 
        /// 3 = Second half in progress, 
        /// 4 = End of regular time,
        /// 5 = First half extra time in progress, 
        /// 6 = Extra time half time in progress, 
        /// 7 = Second half extra time in progress, 
        /// 8 = End of extra time, 
        /// 9 = End of Game, 
        /// 10 = Game is temporary suspended, 
        /// 11 = Penalties in progress
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public InRunningEventState? State
        {
            get { return _state; }
            set 
            {
                if (_state != value)
                {
                    _state = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Elapsed minutes</summary>
        [Newtonsoft.Json.JsonProperty("elapsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Elapsed
        {
            get { return _elapsed; }
            set 
            {
                if (_elapsed != value)
                {
                    _elapsed = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static InRunningEvent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<InRunningEvent>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Leagues : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<League> _leagues1;
    
        /// <summary>Leagues container</summary>
        [Newtonsoft.Json.JsonProperty("leagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<League> Leagues1
        {
            get { return _leagues1; }
            set 
            {
                if (_leagues1 != value)
                {
                    _leagues1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Leagues FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Leagues>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class League : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _name;
        private string _homeTeamType;
        private bool? _hasOfferings;
        private string _container;
        private bool? _allowRoundRobins;
        private int? _leagueSpecialsCount;
        private int? _eventSpecialsCount;
        private int? _eventCount;
    
        /// <summary>League Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Name of the league.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Specifies whether the home team is team1 or team2. You need this information to place a bet.</summary>
        [Newtonsoft.Json.JsonProperty("homeTeamType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HomeTeamType
        {
            get { return _homeTeamType; }
            set 
            {
                if (_homeTeamType != value)
                {
                    _homeTeamType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the league currently has events or specials.</summary>
        [Newtonsoft.Json.JsonProperty("hasOfferings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasOfferings
        {
            get { return _hasOfferings; }
            set 
            {
                if (_hasOfferings != value)
                {
                    _hasOfferings = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Represents grouping for the league, usually a region/country</summary>
        [Newtonsoft.Json.JsonProperty("container", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Container
        {
            get { return _container; }
            set 
            {
                if (_container != value)
                {
                    _container = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Specifies whether you can place parlay round robins on events in this league.</summary>
        [Newtonsoft.Json.JsonProperty("allowRoundRobins", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AllowRoundRobins
        {
            get { return _allowRoundRobins; }
            set 
            {
                if (_allowRoundRobins != value)
                {
                    _allowRoundRobins = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Indicates how many specials are in the given league.</summary>
        [Newtonsoft.Json.JsonProperty("leagueSpecialsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeagueSpecialsCount
        {
            get { return _leagueSpecialsCount; }
            set 
            {
                if (_leagueSpecialsCount != value)
                {
                    _leagueSpecialsCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Indicates how many game specials are in the given league.</summary>
        [Newtonsoft.Json.JsonProperty("eventSpecialsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EventSpecialsCount
        {
            get { return _eventSpecialsCount; }
            set 
            {
                if (_eventSpecialsCount != value)
                {
                    _eventSpecialsCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Indicates how many events are in the given league.</summary>
        [Newtonsoft.Json.JsonProperty("eventCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EventCount
        {
            get { return _eventCount; }
            set 
            {
                if (_eventCount != value)
                {
                    _eventCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static League FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<League>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LineResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private LineResponseStatus? _status;
        private double? _price;
        private long? _lineId;
        private long? _altLineId;
        private int? _team1Score;
        private int? _team2Score;
        private int? _team1RedCards;
        private int? _team2RedCards;
        private double? _maxRiskStake;
        private double? _minRiskStake;
        private double? _maxWinStake;
        private double? _minWinStake;
        private string _effectiveAsOf;
    
        /// <summary>If the value is NOT_EXISTS, than this will be the only parameter in the response. All other params would be empty. [SUCCESS = OK, NOT_EXISTS = Line not offered anymore]</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LineResponseStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Latest price.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Line identification needed to place a bet.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>This would be needed to place the bet if the handicap is on alternate line, otherwise it will not be populated in the response.</summary>
        [Newtonsoft.Json.JsonProperty("altLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AltLineId
        {
            get { return _altLineId; }
            set 
            {
                if (_altLineId != value)
                {
                    _altLineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Away team score. Applicable to soccer only.</summary>
        [Newtonsoft.Json.JsonProperty("team1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Team1Score
        {
            get { return _team1Score; }
            set 
            {
                if (_team1Score != value)
                {
                    _team1Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Home team score. Applicable to soccer only.</summary>
        [Newtonsoft.Json.JsonProperty("team2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Team2Score
        {
            get { return _team2Score; }
            set 
            {
                if (_team2Score != value)
                {
                    _team2Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Team 1 red cards. Applicable to soccer only.</summary>
        [Newtonsoft.Json.JsonProperty("team1RedCards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Team1RedCards
        {
            get { return _team1RedCards; }
            set 
            {
                if (_team1RedCards != value)
                {
                    _team1RedCards = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Team 2 red cards. Applicable to soccer only.</summary>
        [Newtonsoft.Json.JsonProperty("team2RedCards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Team2RedCards
        {
            get { return _team2RedCards; }
            set 
            {
                if (_team2RedCards != value)
                {
                    _team2RedCards = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum bettable risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("maxRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxRiskStake
        {
            get { return _maxRiskStake; }
            set 
            {
                if (_maxRiskStake != value)
                {
                    _maxRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Minimum bettable risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("minRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinRiskStake
        {
            get { return _minRiskStake; }
            set 
            {
                if (_minRiskStake != value)
                {
                    _minRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum bettable win amount.</summary>
        [Newtonsoft.Json.JsonProperty("maxWinStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxWinStake
        {
            get { return _maxWinStake; }
            set 
            {
                if (_maxWinStake != value)
                {
                    _maxWinStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Minimum bettable win amount.</summary>
        [Newtonsoft.Json.JsonProperty("minWinStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinWinStake
        {
            get { return _minWinStake; }
            set 
            {
                if (_minWinStake != value)
                {
                    _minWinStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Line is effective as of this date and time in UTC.</summary>
        [Newtonsoft.Json.JsonProperty("effectiveAsOf", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EffectiveAsOf
        {
            get { return _effectiveAsOf; }
            set 
            {
                if (_effectiveAsOf != value)
                {
                    _effectiveAsOf = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LineResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LineResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayLinesRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private ParlayLinesRequestOddsFormat? _oddsFormat;
        private System.Collections.ObjectModel.ObservableCollection<ParlayLineRequest> _legs;
    
        /// <summary>Odds in the response will be in this format. [American, Decimal, HongKong, Indonesian, Malay]</summary>
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLinesRequestOddsFormat? OddsFormat
        {
            get { return _oddsFormat; }
            set 
            {
                if (_oddsFormat != value)
                {
                    _oddsFormat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>This is a collection of legs</summary>
        [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ParlayLineRequest> Legs
        {
            get { return _legs; }
            set 
            {
                if (_legs != value)
                {
                    _legs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayLinesRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayLinesRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayLineRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _uniqueLegId;
        private long _eventId;
        private int _periodNumber;
        private ParlayLineRequestLegBetType _legBetType;
        private ParlayLineRequestTeam? _team;
        private ParlayLineRequestSide? _side;
        private double? _handicap;
    
        /// <summary>This unique id of the leg. It used to identify and match leg in the response.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueLegId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string UniqueLegId
        {
            get { return _uniqueLegId; }
            set 
            {
                if (_uniqueLegId != value)
                {
                    _uniqueLegId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of the event.</summary>
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Always)]
        public long EventId
        {
            get { return _eventId; }
            set 
            {
                if (_eventId != value)
                {
                    _eventId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>This represents the period of the match. For example, for soccer we have 0 (Game), 1 (1st Half), 2 (2nd Half)</summary>
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Always)]
        public int PeriodNumber
        {
            get { return _periodNumber; }
            set 
            {
                if (_periodNumber != value)
                {
                    _periodNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Only SPREAD, MONEYLINE and TOTAL_POINTS are supported. [SPREAD, MONEYLINE, TOTAL_POINTS]</summary>
        [Newtonsoft.Json.JsonProperty("legBetType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLineRequestLegBetType LegBetType
        {
            get { return _legBetType; }
            set 
            {
                if (_legBetType != value)
                {
                    _legBetType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Chosen team type. This is needed only for SPREAD and MONEYLINE wager types. [Team1, Team2, Draw (MONEYLINE only)]</summary>
        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLineRequestTeam? Team
        {
            get { return _team; }
            set 
            {
                if (_team != value)
                {
                    _team = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Chosen side. This is needed only for TOTAL_POINTS wager type.  [OVER, UNDER]</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLineRequestSide? Side
        {
            get { return _side; }
            set 
            {
                if (_side != value)
                {
                    _side = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>This is needed for SPREAD and TOTAL_POINTS bet type.</summary>
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Handicap
        {
            get { return _handicap; }
            set 
            {
                if (_handicap != value)
                {
                    _handicap = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayLineRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayLineRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayLinesResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private ParlayLinesResponseStatus _status;
        private string _error;
        private double? _maxRiskStake;
        private double? _minRiskStake;
        private System.Collections.ObjectModel.ObservableCollection<RoundRobinOptionWithOdds> _roundRobinOptionWithOdds;
        private System.Collections.ObjectModel.ObservableCollection<ParlayLineLeg> _legs;
    
        /// <summary>Status of the parlay [VALID = Parlay is valid, PROCESSED_WITH_ERROR = Parlay contains error(s)]</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLinesResponseStatus Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>INVALID_LEGS. Signifies that one or more legs are invalid. Populated only if status is PROCESSED_WITH_ERROR.</summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error
        {
            get { return _error; }
            set 
            {
                if (_error != value)
                {
                    _error = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum allowed stake amount.</summary>
        [Newtonsoft.Json.JsonProperty("maxRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxRiskStake
        {
            get { return _maxRiskStake; }
            set 
            {
                if (_maxRiskStake != value)
                {
                    _maxRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Minimum allowed stake amount.</summary>
        [Newtonsoft.Json.JsonProperty("minRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinRiskStake
        {
            get { return _minRiskStake; }
            set 
            {
                if (_minRiskStake != value)
                {
                    _minRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Provides array with all acceptable Round Robin options with parlay odds for that option.</summary>
        [Newtonsoft.Json.JsonProperty("roundRobinOptionWithOdds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<RoundRobinOptionWithOdds> RoundRobinOptionWithOdds
        {
            get { return _roundRobinOptionWithOdds; }
            set 
            {
                if (_roundRobinOptionWithOdds != value)
                {
                    _roundRobinOptionWithOdds = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The collection of legs (the format of the object is described below).</summary>
        [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ParlayLineLeg> Legs
        {
            get { return _legs; }
            set 
            {
                if (_legs != value)
                {
                    _legs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayLinesResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayLinesResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayLineLeg : System.ComponentModel.INotifyPropertyChanged
    {
        private ParlayLineLegStatus _status;
        private ParlayLineLegErrorCode? _errorCode;
        private string _legId;
        private long? _lineId;
        private long? _altLineId;
        private double? _price;
        private System.Collections.ObjectModel.ObservableCollection<string> _correlatedLegs;
    
        /// <summary>Status of the request. [VALID = Valid leg, PROCESSED_WITH_ERROR = Processed with error]</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLineLegStatus Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem. 
        /// 
        ///   CORRELATED = The leg is correlated with another one,  
        ///   CANNOT_PARLAY_LIVE_GAME = The wager is placed on Live game,   
        ///   EVENT_NO_LONGER_AVAILABLE_FOR_BETTING = The event is no longer offered for Parlays,  
        ///   EVENT_NOT_OFFERED_FOR_PARLAY = The event is not offered for Parlays,  
        ///   LINE_DOES_NOT_BELONG_TO_EVENT = LineId does not match the EventId specified in the request,  
        ///   WAGER_TYPE_NO_LONGER_AVAILABLE_FOR_BETTING = Wager Type no longer available for betting, 
        ///   WAGER_TYPE_NOT_VALID_FOR_PARLAY =  Wager Type not valid for parlay,  
        ///   WAGER_TYPE_CONFLICTS_WITH_OTHER_LEG = Wager Type conflicts with other leg  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLineLegErrorCode? ErrorCode
        {
            get { return _errorCode; }
            set 
            {
                if (_errorCode != value)
                {
                    _errorCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Echo of the legId from the request.</summary>
        [Newtonsoft.Json.JsonProperty("legId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LegId
        {
            get { return _legId; }
            set 
            {
                if (_legId != value)
                {
                    _legId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Line identification.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If alternate Line was requested, the Id of that line will be returned.</summary>
        [Newtonsoft.Json.JsonProperty("altLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AltLineId
        {
            get { return _altLineId; }
            set 
            {
                if (_altLineId != value)
                {
                    _altLineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Price</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If errorCode is CORRELATED will contain legIds of all correlated legs.</summary>
        [Newtonsoft.Json.JsonProperty("correlatedLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> CorrelatedLegs
        {
            get { return _correlatedLegs; }
            set 
            {
                if (_correlatedLegs != value)
                {
                    _correlatedLegs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayLineLeg FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayLineLeg>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class LinesRequestTeaser : System.ComponentModel.INotifyPropertyChanged
    {
        private long _teaserId;
        private LinesRequestTeaserOddsFormat _oddsFormat;
        private System.Collections.ObjectModel.ObservableCollection<TeaserLineRequest> _legs = new System.Collections.ObjectModel.ObservableCollection<TeaserLineRequest>();
    
        /// <summary>Unique identifier. Teaser details can be retrieved from a call to v1/teaser/groups endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("teaserId", Required = Newtonsoft.Json.Required.Always)]
        public long TeaserId
        {
            get { return _teaserId; }
            set 
            {
                if (_teaserId != value)
                {
                    _teaserId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Format the odds are returned in.. = [American, Decimal, HongKong, Indonesian, Malay]</summary>
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LinesRequestTeaserOddsFormat OddsFormat
        {
            get { return _oddsFormat; }
            set 
            {
                if (_oddsFormat != value)
                {
                    _oddsFormat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Collection of Teaser Legs.</summary>
        [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<TeaserLineRequest> Legs
        {
            get { return _legs; }
            set 
            {
                if (_legs != value)
                {
                    _legs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static LinesRequestTeaser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<LinesRequestTeaser>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserLineRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _legId;
        private long _eventId;
        private int _periodNumber;
        private TeaserLineRequestBetType _betType;
        private TeaserLineRequestTeam? _team;
        private TeaserLineRequestSide? _side;
        private double _handicap;
    
        /// <summary>Client genereated GUID for uniquely identifying the leg.</summary>
        [Newtonsoft.Json.JsonProperty("legId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LegId
        {
            get { return _legId; }
            set 
            {
                if (_legId != value)
                {
                    _legId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Always)]
        public long EventId
        {
            get { return _eventId; }
            set 
            {
                if (_eventId != value)
                {
                    _eventId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Period of the match that is being bet on. v1/periods endpoint can be used to retrieve all periods for a sport.</summary>
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Always)]
        public int PeriodNumber
        {
            get { return _periodNumber; }
            set 
            {
                if (_periodNumber != value)
                {
                    _periodNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Type of bet. Currently only SPREAD and TOTAL_POINTS are supported. [SPREAD, TOTAL_POINTS]</summary>
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserLineRequestBetType BetType
        {
            get { return _betType; }
            set 
            {
                if (_betType != value)
                {
                    _betType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Team being bet on for a spread line. [Team1, Team2]</summary>
        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserLineRequestTeam? Team
        {
            get { return _team; }
            set 
            {
                if (_team != value)
                {
                    _team = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Side of a total line being bet on. [OVER, UNDER]</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserLineRequestSide? Side
        {
            get { return _side; }
            set 
            {
                if (_side != value)
                {
                    _side = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of points.</summary>
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Always)]
        public double Handicap
        {
            get { return _handicap; }
            set 
            {
                if (_handicap != value)
                {
                    _handicap = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserLineRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserLineRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserLinesResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private TeaserLinesResponseStatus _status;
        private TeaserLinesResponseErrorCode? _errorCode;
        private double? _price;
        private double? _minRiskStake;
        private double? _maxRiskStake;
        private double? _minWinStake;
        private double? _maxWinStake;
        private System.Collections.ObjectModel.ObservableCollection<TeaserLineLeg> _legs = new System.Collections.ObjectModel.ObservableCollection<TeaserLineLeg>();
    
        /// <summary>Status of the request. [VALID = Teaser is valid, PROCESSED_WITH_ERROR = Teaser contains one or more errors]</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserLinesResponseStatus Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.  
        ///    
        ///   INVALID_LEGS = One or more of the legs is invalid,
        ///   SAME_EVENT_ONLY_REQUIRED = Teaser specified requires that all legs are from the same event,  
        ///   TEASER_DISABLED = Teaser has been disabled and cannot be bet on,  
        ///   TEASER_DOES_NOT_EXIST = The teaser identifier could requeted could not be found,  
        ///   TOO_FEW_LEGS = You do not meet the minimum number of legs requirement for the teaser specified,  
        ///   TOO_MANY_LEGS = You are above the maximum number of legs for the teaser specified,  
        ///   UNKNOWN = An unknown error has occured  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserLinesResponseErrorCode? ErrorCode
        {
            get { return _errorCode; }
            set 
            {
                if (_errorCode != value)
                {
                    _errorCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Price for the bet.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Minimum bet amount for WIN_RISK_TYPE.RISK.</summary>
        [Newtonsoft.Json.JsonProperty("minRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinRiskStake
        {
            get { return _minRiskStake; }
            set 
            {
                if (_minRiskStake != value)
                {
                    _minRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum bet amount for WIN_RISK_TYPE.RISK.</summary>
        [Newtonsoft.Json.JsonProperty("maxRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxRiskStake
        {
            get { return _maxRiskStake; }
            set 
            {
                if (_maxRiskStake != value)
                {
                    _maxRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Minimum bet amount for WIN_RISK_TYPE.WIN.</summary>
        [Newtonsoft.Json.JsonProperty("minWinStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinWinStake
        {
            get { return _minWinStake; }
            set 
            {
                if (_minWinStake != value)
                {
                    _minWinStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum bet amount for WIN_RISK_TYPE.WIN.</summary>
        [Newtonsoft.Json.JsonProperty("maxWinStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxWinStake
        {
            get { return _maxWinStake; }
            set 
            {
                if (_maxWinStake != value)
                {
                    _maxWinStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Collection of Teaser Legs from the request.</summary>
        [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<TeaserLineLeg> Legs
        {
            get { return _legs; }
            set 
            {
                if (_legs != value)
                {
                    _legs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserLinesResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserLinesResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserLineLeg : System.ComponentModel.INotifyPropertyChanged
    {
        private TeaserLineLegStatus _status;
        private TeaserLineLegErrorCode? _errorCode;
        private string _legId;
        private long? _lineId;
    
        /// <summary>Status of the request. [VALID = Teaser is valid, PROCESSED_WITH_ERROR = Teaser contains error(s)]</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserLineLegStatus Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.  
        ///   
        ///   EVENT_NOT_FOUND = The event specified could not be found,  
        ///   POINTS_NO_LONGER_AVAILABLE = The points requested are no longer available. This means that the lines moved,   
        ///   UNKNOWN = An unknown error has occured,  
        ///   WAGER_TYPE_NOT_VALID_FOR_TEASER = The specified wager type is not valid for teasers  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserLineLegErrorCode? ErrorCode
        {
            get { return _errorCode; }
            set 
            {
                if (_errorCode != value)
                {
                    _errorCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Echo of the unique id for the leg from the request.</summary>
        [Newtonsoft.Json.JsonProperty("legId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LegId
        {
            get { return _legId; }
            set 
            {
                if (_legId != value)
                {
                    _legId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Line identification.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserLineLeg FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserLineLeg>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OddsResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _sportId;
        private long? _last;
        private System.Collections.ObjectModel.ObservableCollection<OddsLeague> _leagues;
    
        /// <summary>Same as requested sport Id.</summary>
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Use this value for the subsequent requests for since query parameter to get just the changes since previous response.</summary>
        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Last
        {
            get { return _last; }
            set 
            {
                if (_last != value)
                {
                    _last = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contains a list of Leagues.</summary>
        [Newtonsoft.Json.JsonProperty("leagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<OddsLeague> Leagues
        {
            get { return _leagues; }
            set 
            {
                if (_leagues != value)
                {
                    _leagues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OddsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OddsResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OddsLeague : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private System.Collections.ObjectModel.ObservableCollection<OddsEvent> _events;
    
        /// <summary>League Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contains a list of events.</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<OddsEvent> Events
        {
            get { return _events; }
            set 
            {
                if (_events != value)
                {
                    _events = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OddsLeague FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OddsLeague>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OddsEvent : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private double? _awayScore;
        private double? _homeScore;
        private int? _awayRedCards;
        private int? _homeRedCards;
        private System.Collections.ObjectModel.ObservableCollection<OddsPeriod> _periods;
    
        /// <summary>Event Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Away team score. Only for live soccer events.</summary>
        [Newtonsoft.Json.JsonProperty("awayScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AwayScore
        {
            get { return _awayScore; }
            set 
            {
                if (_awayScore != value)
                {
                    _awayScore = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Home team score. Only for live soccer events.</summary>
        [Newtonsoft.Json.JsonProperty("homeScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HomeScore
        {
            get { return _homeScore; }
            set 
            {
                if (_homeScore != value)
                {
                    _homeScore = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Away team red cards. Only for live soccer events.</summary>
        [Newtonsoft.Json.JsonProperty("awayRedCards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayRedCards
        {
            get { return _awayRedCards; }
            set 
            {
                if (_awayRedCards != value)
                {
                    _awayRedCards = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Home team red cards. Only for live soccer events.</summary>
        [Newtonsoft.Json.JsonProperty("homeRedCards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeRedCards
        {
            get { return _homeRedCards; }
            set 
            {
                if (_homeRedCards != value)
                {
                    _homeRedCards = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contains a list of periods.</summary>
        [Newtonsoft.Json.JsonProperty("periods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<OddsPeriod> Periods
        {
            get { return _periods; }
            set 
            {
                if (_periods != value)
                {
                    _periods = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OddsEvent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OddsEvent>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OddsPeriod : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _lineId;
        private int? _number;
        private System.DateTime? _cutoff;
        private double? _maxSpread;
        private double? _maxMoneyline;
        private double? _maxTotal;
        private double? _maxTeamTotal;
        private System.Collections.ObjectModel.ObservableCollection<OddsSpread> _spreads;
        private OddsMoneyline _moneyline;
        private System.Collections.ObjectModel.ObservableCollection<OddsTotal> _totals;
        private OddsTeamTotals _teamTotal;
    
        /// <summary>Line Id.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>This represents the period of the match. For example, for soccer we have  0 (Game), 1 (1st Half) & 2 (2nd Half)</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Period’s wagering cut-off date in UTC.</summary>
        [Newtonsoft.Json.JsonProperty("cutoff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Cutoff
        {
            get { return _cutoff; }
            set 
            {
                if (_cutoff != value)
                {
                    _cutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum spread bet. Only in straight odds response.</summary>
        [Newtonsoft.Json.JsonProperty("maxSpread", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxSpread
        {
            get { return _maxSpread; }
            set 
            {
                if (_maxSpread != value)
                {
                    _maxSpread = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum moneyline bet. Only in straight odds response.</summary>
        [Newtonsoft.Json.JsonProperty("maxMoneyline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxMoneyline
        {
            get { return _maxMoneyline; }
            set 
            {
                if (_maxMoneyline != value)
                {
                    _maxMoneyline = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum total points bet. Only in straight odds response.</summary>
        [Newtonsoft.Json.JsonProperty("maxTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxTotal
        {
            get { return _maxTotal; }
            set 
            {
                if (_maxTotal != value)
                {
                    _maxTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum team total points bet. Only in straight odds response.</summary>
        [Newtonsoft.Json.JsonProperty("maxTeamTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxTeamTotal
        {
            get { return _maxTeamTotal; }
            set 
            {
                if (_maxTeamTotal != value)
                {
                    _maxTeamTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Container for spread odds.</summary>
        [Newtonsoft.Json.JsonProperty("spreads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<OddsSpread> Spreads
        {
            get { return _spreads; }
            set 
            {
                if (_spreads != value)
                {
                    _spreads = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("moneyline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OddsMoneyline Moneyline
        {
            get { return _moneyline; }
            set 
            {
                if (_moneyline != value)
                {
                    _moneyline = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Container for team total points.</summary>
        [Newtonsoft.Json.JsonProperty("totals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<OddsTotal> Totals
        {
            get { return _totals; }
            set 
            {
                if (_totals != value)
                {
                    _totals = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("teamTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OddsTeamTotals TeamTotal
        {
            get { return _teamTotal; }
            set 
            {
                if (_teamTotal != value)
                {
                    _teamTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OddsPeriod FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OddsPeriod>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OddsSpread : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _altLineId;
        private double? _hdp;
        private double? _home;
        private double? _away;
    
        /// <summary>This is present only if it’s alternative line.</summary>
        [Newtonsoft.Json.JsonProperty("altLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AltLineId
        {
            get { return _altLineId; }
            set 
            {
                if (_altLineId != value)
                {
                    _altLineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Home team handicap.</summary>
        [Newtonsoft.Json.JsonProperty("hdp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Hdp
        {
            get { return _hdp; }
            set 
            {
                if (_hdp != value)
                {
                    _hdp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Home team price.</summary>
        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Home
        {
            get { return _home; }
            set 
            {
                if (_home != value)
                {
                    _home = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Away team price.</summary>
        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Away
        {
            get { return _away; }
            set 
            {
                if (_away != value)
                {
                    _away = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OddsSpread FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OddsSpread>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OddsMoneyline : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _home;
        private double? _away;
        private double? _draw;
    
        /// <summary>Away team price</summary>
        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Home
        {
            get { return _home; }
            set 
            {
                if (_home != value)
                {
                    _home = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Away team price.</summary>
        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Away
        {
            get { return _away; }
            set 
            {
                if (_away != value)
                {
                    _away = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Draw price. This is present only for events we offer price for draw.</summary>
        [Newtonsoft.Json.JsonProperty("draw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Draw
        {
            get { return _draw; }
            set 
            {
                if (_draw != value)
                {
                    _draw = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OddsMoneyline FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OddsMoneyline>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OddsTotal : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _altLineId;
        private double? _points;
        private double? _over;
        private double? _under;
    
        /// <summary>This is present only if it’s alternative line.</summary>
        [Newtonsoft.Json.JsonProperty("altLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AltLineId
        {
            get { return _altLineId; }
            set 
            {
                if (_altLineId != value)
                {
                    _altLineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Total points.</summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Points
        {
            get { return _points; }
            set 
            {
                if (_points != value)
                {
                    _points = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Over price.</summary>
        [Newtonsoft.Json.JsonProperty("over", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Over
        {
            get { return _over; }
            set 
            {
                if (_over != value)
                {
                    _over = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Under price.</summary>
        [Newtonsoft.Json.JsonProperty("under", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Under
        {
            get { return _under; }
            set 
            {
                if (_under != value)
                {
                    _under = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OddsTotal FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OddsTotal>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OddsTeamTotals : System.ComponentModel.INotifyPropertyChanged
    {
        private OddsTeamTotal _home;
        private OddsTeamTotal _away;
    
        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OddsTeamTotal Home
        {
            get { return _home; }
            set 
            {
                if (_home != value)
                {
                    _home = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public OddsTeamTotal Away
        {
            get { return _away; }
            set 
            {
                if (_away != value)
                {
                    _away = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OddsTeamTotals FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OddsTeamTotals>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OddsTeamTotal : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _points;
        private double? _over;
        private double? _under;
    
        /// <summary>Total points.</summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Points
        {
            get { return _points; }
            set 
            {
                if (_points != value)
                {
                    _points = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Over price.</summary>
        [Newtonsoft.Json.JsonProperty("over", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Over
        {
            get { return _over; }
            set 
            {
                if (_over != value)
                {
                    _over = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Under price.</summary>
        [Newtonsoft.Json.JsonProperty("under", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Under
        {
            get { return _under; }
            set 
            {
                if (_under != value)
                {
                    _under = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static OddsTeamTotal FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OddsTeamTotal>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayOddsResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private int _sportId;
        private long _last;
        private System.Collections.ObjectModel.ObservableCollection<ParlayOddsLeague> _leagues = new System.Collections.ObjectModel.ObservableCollection<ParlayOddsLeague>();
    
        /// <summary>Same as requested sport Id.</summary>
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Always)]
        public int SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Use this value for the subsequent requests for since query parameter to get just the changes since previous response.</summary>
        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.Always)]
        public long Last
        {
            get { return _last; }
            set 
            {
                if (_last != value)
                {
                    _last = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contains a list of Leagues.</summary>
        [Newtonsoft.Json.JsonProperty("leagues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<ParlayOddsLeague> Leagues
        {
            get { return _leagues; }
            set 
            {
                if (_leagues != value)
                {
                    _leagues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayOddsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayOddsResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayOddsLeague : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id;
        private System.Collections.ObjectModel.ObservableCollection<ParlayOddsEvent> _events = new System.Collections.ObjectModel.ObservableCollection<ParlayOddsEvent>();
    
        /// <summary>League Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contains a list of events.</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<ParlayOddsEvent> Events
        {
            get { return _events; }
            set 
            {
                if (_events != value)
                {
                    _events = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayOddsLeague FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayOddsLeague>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayOddsEvent : System.ComponentModel.INotifyPropertyChanged
    {
        private long _id;
        private double? _awayScore;
        private double? _homeScore;
        private int? _awayRedCards;
        private int? _homeRedCards;
        private System.Collections.ObjectModel.ObservableCollection<ParlayOddsPeriod> _periods = new System.Collections.ObjectModel.ObservableCollection<ParlayOddsPeriod>();
    
        /// <summary>Event Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Away team score. Only for live soccer events.</summary>
        [Newtonsoft.Json.JsonProperty("awayScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AwayScore
        {
            get { return _awayScore; }
            set 
            {
                if (_awayScore != value)
                {
                    _awayScore = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Home team score. Only for live soccer events.</summary>
        [Newtonsoft.Json.JsonProperty("homeScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HomeScore
        {
            get { return _homeScore; }
            set 
            {
                if (_homeScore != value)
                {
                    _homeScore = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Away team red cards. Only for live soccer events.</summary>
        [Newtonsoft.Json.JsonProperty("awayRedCards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AwayRedCards
        {
            get { return _awayRedCards; }
            set 
            {
                if (_awayRedCards != value)
                {
                    _awayRedCards = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Home team red cards. Only for live soccer events.</summary>
        [Newtonsoft.Json.JsonProperty("homeRedCards", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HomeRedCards
        {
            get { return _homeRedCards; }
            set 
            {
                if (_homeRedCards != value)
                {
                    _homeRedCards = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contains a list of periods.</summary>
        [Newtonsoft.Json.JsonProperty("periods", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<ParlayOddsPeriod> Periods
        {
            get { return _periods; }
            set 
            {
                if (_periods != value)
                {
                    _periods = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayOddsEvent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayOddsEvent>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayOddsPeriod : System.ComponentModel.INotifyPropertyChanged
    {
        private long _lineId;
        private int _number;
        private System.DateTime _cutoff;
        private double? _maxSpread;
        private double? _maxMoneyline;
        private double? _maxTotal;
        private double? _maxTeamTotal;
        private System.Collections.ObjectModel.ObservableCollection<ParlayOddsSpread> _spreads;
        private ParlayOddsMoneyline _moneyline;
        private System.Collections.ObjectModel.ObservableCollection<ParlayOddsTotal> _totals;
        private ParlayOddsTeamTotals _teamTotal;
    
        /// <summary>Line Id.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Always)]
        public long LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>This represents the period of the match. For example, for soccer we have 0 (Game), 1 (1st Half) & 2 (2nd Half)</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        public int Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Period’s wagering cut-off date in UTC.</summary>
        [Newtonsoft.Json.JsonProperty("cutoff", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime Cutoff
        {
            get { return _cutoff; }
            set 
            {
                if (_cutoff != value)
                {
                    _cutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum spread bet. Only in straight odds response.</summary>
        [Newtonsoft.Json.JsonProperty("maxSpread", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxSpread
        {
            get { return _maxSpread; }
            set 
            {
                if (_maxSpread != value)
                {
                    _maxSpread = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum moneyline bet. Only in straight odds response.</summary>
        [Newtonsoft.Json.JsonProperty("maxMoneyline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxMoneyline
        {
            get { return _maxMoneyline; }
            set 
            {
                if (_maxMoneyline != value)
                {
                    _maxMoneyline = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum total points bet. Only in straight odds response.</summary>
        [Newtonsoft.Json.JsonProperty("maxTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxTotal
        {
            get { return _maxTotal; }
            set 
            {
                if (_maxTotal != value)
                {
                    _maxTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum team total points bet. Only in straight odds response.</summary>
        [Newtonsoft.Json.JsonProperty("maxTeamTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxTeamTotal
        {
            get { return _maxTeamTotal; }
            set 
            {
                if (_maxTeamTotal != value)
                {
                    _maxTeamTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Container for spread odds.</summary>
        [Newtonsoft.Json.JsonProperty("spreads", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ParlayOddsSpread> Spreads
        {
            get { return _spreads; }
            set 
            {
                if (_spreads != value)
                {
                    _spreads = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("moneyline", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParlayOddsMoneyline Moneyline
        {
            get { return _moneyline; }
            set 
            {
                if (_moneyline != value)
                {
                    _moneyline = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Container for team total points.</summary>
        [Newtonsoft.Json.JsonProperty("totals", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ParlayOddsTotal> Totals
        {
            get { return _totals; }
            set 
            {
                if (_totals != value)
                {
                    _totals = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("teamTotal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParlayOddsTeamTotals TeamTotal
        {
            get { return _teamTotal; }
            set 
            {
                if (_teamTotal != value)
                {
                    _teamTotal = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayOddsPeriod FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayOddsPeriod>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayOddsSpread : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _altLineId;
        private double _hdp;
        private double _home;
        private double _away;
    
        /// <summary>This is present only if it’s alternative line.</summary>
        [Newtonsoft.Json.JsonProperty("altLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AltLineId
        {
            get { return _altLineId; }
            set 
            {
                if (_altLineId != value)
                {
                    _altLineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Home team handicap.</summary>
        [Newtonsoft.Json.JsonProperty("hdp", Required = Newtonsoft.Json.Required.Always)]
        public double Hdp
        {
            get { return _hdp; }
            set 
            {
                if (_hdp != value)
                {
                    _hdp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Home team price.</summary>
        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Always)]
        public double Home
        {
            get { return _home; }
            set 
            {
                if (_home != value)
                {
                    _home = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Away team price.</summary>
        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Always)]
        public double Away
        {
            get { return _away; }
            set 
            {
                if (_away != value)
                {
                    _away = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayOddsSpread FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayOddsSpread>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayOddsMoneyline : System.ComponentModel.INotifyPropertyChanged
    {
        private double _home;
        private double _away;
        private double? _draw;
    
        /// <summary>Away team price</summary>
        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Always)]
        public double Home
        {
            get { return _home; }
            set 
            {
                if (_home != value)
                {
                    _home = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Away team price.</summary>
        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Always)]
        public double Away
        {
            get { return _away; }
            set 
            {
                if (_away != value)
                {
                    _away = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Draw price. This is present only for events we offer price for draw.</summary>
        [Newtonsoft.Json.JsonProperty("draw", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Draw
        {
            get { return _draw; }
            set 
            {
                if (_draw != value)
                {
                    _draw = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayOddsMoneyline FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayOddsMoneyline>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayOddsTotal : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _altLineId;
        private double _points;
        private double _over;
        private double _under;
    
        /// <summary>Line Id for the alternate line. This is present only if it’s alternative line.</summary>
        [Newtonsoft.Json.JsonProperty("altLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AltLineId
        {
            get { return _altLineId; }
            set 
            {
                if (_altLineId != value)
                {
                    _altLineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Total points.</summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Always)]
        public double Points
        {
            get { return _points; }
            set 
            {
                if (_points != value)
                {
                    _points = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Over price.</summary>
        [Newtonsoft.Json.JsonProperty("over", Required = Newtonsoft.Json.Required.Always)]
        public double Over
        {
            get { return _over; }
            set 
            {
                if (_over != value)
                {
                    _over = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Under price.</summary>
        [Newtonsoft.Json.JsonProperty("under", Required = Newtonsoft.Json.Required.Always)]
        public double Under
        {
            get { return _under; }
            set 
            {
                if (_under != value)
                {
                    _under = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayOddsTotal FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayOddsTotal>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayOddsTeamTotals : System.ComponentModel.INotifyPropertyChanged
    {
        private ParlayOddsTotal _away;
        private ParlayOddsTotal _home;
    
        [Newtonsoft.Json.JsonProperty("away", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParlayOddsTotal Away
        {
            get { return _away; }
            set 
            {
                if (_away != value)
                {
                    _away = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("home", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParlayOddsTotal Home
        {
            get { return _home; }
            set 
            {
                if (_home != value)
                {
                    _home = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayOddsTeamTotals FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayOddsTeamTotals>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserOddsResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _teaserId;
        private int? _sportId;
        private System.Collections.ObjectModel.ObservableCollection<TeaserOddsLeague> _leagues;
    
        /// <summary>Unique identifier. Teaser details can be retrieved from a call to Get Teaser Groups endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("teaserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? TeaserId
        {
            get { return _teaserId; }
            set 
            {
                if (_teaserId != value)
                {
                    _teaserId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique identifier. Sport details can be retrieved from a call to Get Sports endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of League.</summary>
        [Newtonsoft.Json.JsonProperty("leagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TeaserOddsLeague> Leagues
        {
            get { return _leagues; }
            set 
            {
                if (_leagues != value)
                {
                    _leagues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserOddsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserOddsResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserOddsLeague : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private System.Collections.ObjectModel.ObservableCollection<TeaserOddsEvent> _events;
    
        /// <summary>Unique identifier. League details can be retrieved from a call to Get Leagues endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of Event.</summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TeaserOddsEvent> Events
        {
            get { return _events; }
            set 
            {
                if (_events != value)
                {
                    _events = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserOddsLeague FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserOddsLeague>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserOddsEvent : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private System.Collections.ObjectModel.ObservableCollection<TeaserOddsPeriod> _periods;
    
        /// <summary>Unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of periods indicating the period numbers available for betting.</summary>
        [Newtonsoft.Json.JsonProperty("periods", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TeaserOddsPeriod> Periods
        {
            get { return _periods; }
            set 
            {
                if (_periods != value)
                {
                    _periods = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserOddsEvent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserOddsEvent>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserOddsPeriod : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _number;
        private long? _lineId;
        private TeaserOddsSpread _spread;
        private TeaserOddsTotalPoints _total;
    
        /// <summary>Period of the match that the request is for. Refer to v1/periods endpoint to retrieve all valid periods for a sport.</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("spread", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeaserOddsSpread Spread
        {
            get { return _spread; }
            set 
            {
                if (_spread != value)
                {
                    _spread = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeaserOddsTotalPoints Total
        {
            get { return _total; }
            set 
            {
                if (_total != value)
                {
                    _total = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserOddsPeriod FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserOddsPeriod>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserOddsSpread : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _maxBet;
        private double? _homeHdp;
        private double? _awayHdp;
    
        /// <summary>Maximum bet amount.</summary>
        [Newtonsoft.Json.JsonProperty("maxBet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxBet
        {
            get { return _maxBet; }
            set 
            {
                if (_maxBet != value)
                {
                    _maxBet = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Home team handicap. Refer to Get Fixtures endpoint to determine home and away teams.</summary>
        [Newtonsoft.Json.JsonProperty("homeHdp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HomeHdp
        {
            get { return _homeHdp; }
            set 
            {
                if (_homeHdp != value)
                {
                    _homeHdp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Away team handicap. Refer to Get Fixtures endpoint to determine home and away teams.</summary>
        [Newtonsoft.Json.JsonProperty("awayHdp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AwayHdp
        {
            get { return _awayHdp; }
            set 
            {
                if (_awayHdp != value)
                {
                    _awayHdp = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserOddsSpread FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserOddsSpread>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserOddsTotalPoints : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _maxBet;
        private double? _overPoints;
        private double? _underPoints;
    
        /// <summary>Maximum bet amount.</summary>
        [Newtonsoft.Json.JsonProperty("maxBet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxBet
        {
            get { return _maxBet; }
            set 
            {
                if (_maxBet != value)
                {
                    _maxBet = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Over points.</summary>
        [Newtonsoft.Json.JsonProperty("overPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OverPoints
        {
            get { return _overPoints; }
            set 
            {
                if (_overPoints != value)
                {
                    _overPoints = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Under points.</summary>
        [Newtonsoft.Json.JsonProperty("underPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnderPoints
        {
            get { return _underPoints; }
            set 
            {
                if (_underPoints != value)
                {
                    _underPoints = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserOddsTotalPoints FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserOddsTotalPoints>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SportPeriod : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _number;
        private string _description;
        private string _shortDescription;
        private string _spreadDescription;
        private string _moneylineDescription;
        private string _totalDescription;
        private string _team1TotalDescription;
        private string _team2TotalDescription;
        private string _spreadShortDescription;
        private string _moneylineShortDescription;
        private string _totalShortDescription;
        private string _team1TotalShortDescription;
        private string _team2TotalShortDescription;
    
        /// <summary>Period Number</summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Number
        {
            get { return _number; }
            set 
            {
                if (_number != value)
                {
                    _number = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Description for the period</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Short description for the period</summary>
        [Newtonsoft.Json.JsonProperty("shortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortDescription
        {
            get { return _shortDescription; }
            set 
            {
                if (_shortDescription != value)
                {
                    _shortDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Description for the Spread</summary>
        [Newtonsoft.Json.JsonProperty("spreadDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpreadDescription
        {
            get { return _spreadDescription; }
            set 
            {
                if (_spreadDescription != value)
                {
                    _spreadDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Description for the Moneyline</summary>
        [Newtonsoft.Json.JsonProperty("moneylineDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MoneylineDescription
        {
            get { return _moneylineDescription; }
            set 
            {
                if (_moneylineDescription != value)
                {
                    _moneylineDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Description for the Totals</summary>
        [Newtonsoft.Json.JsonProperty("totalDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalDescription
        {
            get { return _totalDescription; }
            set 
            {
                if (_totalDescription != value)
                {
                    _totalDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Description for Team1 Totals</summary>
        [Newtonsoft.Json.JsonProperty("team1TotalDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team1TotalDescription
        {
            get { return _team1TotalDescription; }
            set 
            {
                if (_team1TotalDescription != value)
                {
                    _team1TotalDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Description for Team2 Totals</summary>
        [Newtonsoft.Json.JsonProperty("team2TotalDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team2TotalDescription
        {
            get { return _team2TotalDescription; }
            set 
            {
                if (_team2TotalDescription != value)
                {
                    _team2TotalDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Short description for the Spread</summary>
        [Newtonsoft.Json.JsonProperty("spreadShortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SpreadShortDescription
        {
            get { return _spreadShortDescription; }
            set 
            {
                if (_spreadShortDescription != value)
                {
                    _spreadShortDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Short description for the Moneyline</summary>
        [Newtonsoft.Json.JsonProperty("moneylineShortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MoneylineShortDescription
        {
            get { return _moneylineShortDescription; }
            set 
            {
                if (_moneylineShortDescription != value)
                {
                    _moneylineShortDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Short description for the Totals</summary>
        [Newtonsoft.Json.JsonProperty("totalShortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalShortDescription
        {
            get { return _totalShortDescription; }
            set 
            {
                if (_totalShortDescription != value)
                {
                    _totalShortDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Short description for Team1 Totals</summary>
        [Newtonsoft.Json.JsonProperty("team1TotalShortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team1TotalShortDescription
        {
            get { return _team1TotalShortDescription; }
            set 
            {
                if (_team1TotalShortDescription != value)
                {
                    _team1TotalShortDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Short description for Team2 Totals</summary>
        [Newtonsoft.Json.JsonProperty("team2TotalShortDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team2TotalShortDescription
        {
            get { return _team2TotalShortDescription; }
            set 
            {
                if (_team2TotalShortDescription != value)
                {
                    _team2TotalShortDescription = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SportPeriod FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SportPeriod>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SportsResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<Sport> _sports;
    
        /// <summary>Sports container.</summary>
        [Newtonsoft.Json.JsonProperty("sports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Sport> Sports
        {
            get { return _sports; }
            set 
            {
                if (_sports != value)
                {
                    _sports = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SportsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SportsResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Sport : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private string _name;
        private bool? _hasOfferings;
        private int? _leagueSpecialsCount;
        private int? _eventSpecialsCount;
        private int? _eventCount;
    
        /// <summary>Sport Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Sport name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the sport currently has events or specials.</summary>
        [Newtonsoft.Json.JsonProperty("hasOfferings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasOfferings
        {
            get { return _hasOfferings; }
            set 
            {
                if (_hasOfferings != value)
                {
                    _hasOfferings = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Indicates how many specials are in the given sport.</summary>
        [Newtonsoft.Json.JsonProperty("leagueSpecialsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeagueSpecialsCount
        {
            get { return _leagueSpecialsCount; }
            set 
            {
                if (_leagueSpecialsCount != value)
                {
                    _leagueSpecialsCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Indicates how many event specials are in the given sport.</summary>
        [Newtonsoft.Json.JsonProperty("eventSpecialsCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EventSpecialsCount
        {
            get { return _eventSpecialsCount; }
            set 
            {
                if (_eventSpecialsCount != value)
                {
                    _eventSpecialsCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Indicates how many events are in the given sport.</summary>
        [Newtonsoft.Json.JsonProperty("eventCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EventCount
        {
            get { return _eventCount; }
            set 
            {
                if (_eventCount != value)
                {
                    _eventCount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Sport FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sport>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserGroupsResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<TeaserGroups> _teaserGroups;
    
        /// <summary>A collection of TeaserGroups containing available teasers.</summary>
        [Newtonsoft.Json.JsonProperty("teaserGroups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TeaserGroups> TeaserGroups
        {
            get { return _teaserGroups; }
            set 
            {
                if (_teaserGroups != value)
                {
                    _teaserGroups = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserGroupsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserGroupsResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserGroups : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private string _name;
        private System.Collections.ObjectModel.ObservableCollection<TeaserGroupsTeaser> _teasers;
    
        /// <summary>Unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Friendly name for the Teaser Group</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of Teaser.</summary>
        [Newtonsoft.Json.JsonProperty("teasers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TeaserGroupsTeaser> Teasers
        {
            get { return _teasers; }
            set 
            {
                if (_teasers != value)
                {
                    _teasers = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserGroups FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserGroups>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserGroupsTeaser : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private string _description;
        private int? _sportId;
        private int? _minLegs;
        private int? _maxLegs;
        private bool? _sameEventOnly;
        private System.Collections.ObjectModel.ObservableCollection<TeaserGroupsPayout> _payouts;
        private System.Collections.ObjectModel.ObservableCollection<TeaserGroupsLeague> _leagues;
    
        /// <summary>Unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Description for the Teaser.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique Sport identifier. Sport details can be retrieved from a call to v2/sports endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Minimum number of legs that must be selected.</summary>
        [Newtonsoft.Json.JsonProperty("minLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MinLegs
        {
            get { return _minLegs; }
            set 
            {
                if (_minLegs != value)
                {
                    _minLegs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum number of legs that can be selected.</summary>
        [Newtonsoft.Json.JsonProperty("maxLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxLegs
        {
            get { return _maxLegs; }
            set 
            {
                if (_maxLegs != value)
                {
                    _maxLegs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If 'true' then all legs must be from the same event, otherwise legs can be from different events.</summary>
        [Newtonsoft.Json.JsonProperty("sameEventOnly", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SameEventOnly
        {
            get { return _sameEventOnly; }
            set 
            {
                if (_sameEventOnly != value)
                {
                    _sameEventOnly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of Payout indicating all possible payout combinations.</summary>
        [Newtonsoft.Json.JsonProperty("payouts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TeaserGroupsPayout> Payouts
        {
            get { return _payouts; }
            set 
            {
                if (_payouts != value)
                {
                    _payouts = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of Leagues available to the teaser.</summary>
        [Newtonsoft.Json.JsonProperty("leagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TeaserGroupsLeague> Leagues
        {
            get { return _leagues; }
            set 
            {
                if (_leagues != value)
                {
                    _leagues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserGroupsTeaser FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserGroupsTeaser>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserGroupsPayout : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _numberOfLegs;
        private double? _price;
    
        /// <summary>Number of legs that must be bet and won to get the associated price.</summary>
        [Newtonsoft.Json.JsonProperty("numberOfLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberOfLegs
        {
            get { return _numberOfLegs; }
            set 
            {
                if (_numberOfLegs != value)
                {
                    _numberOfLegs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Price of the bet given the specified number of legs.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserGroupsPayout FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserGroupsPayout>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserGroupsLeague : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private TeaserGroupsBetType _spread;
        private TeaserGroupsBetType _total;
    
        /// <summary>Unique identifier. League details can be retrieved from a call to v2/leagues endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("spread", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeaserGroupsBetType Spread
        {
            get { return _spread; }
            set 
            {
                if (_spread != value)
                {
                    _spread = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeaserGroupsBetType Total
        {
            get { return _total; }
            set 
            {
                if (_total != value)
                {
                    _total = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserGroupsLeague FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserGroupsLeague>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserGroupsBetType : System.ComponentModel.INotifyPropertyChanged
    {
        private double? _points;
    
        /// <summary>Number of points the line will be teased for the given league.</summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Points
        {
            get { return _points; }
            set 
            {
                if (_points != value)
                {
                    _points = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserGroupsBetType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserGroupsBetType>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialsFixturesResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _sportId;
        private long? _last;
        private System.Collections.ObjectModel.ObservableCollection<SpecialsFixturesLeague> _leagues;
    
        /// <summary>Id of a sport for which to retrieve the odds.</summary>
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Used for retrieving changes only on subsequent requests. Provide this value as the Since paramter in subsequent calls to only retrieve changes.</summary>
        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Last
        {
            get { return _last; }
            set 
            {
                if (_last != value)
                {
                    _last = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contains a list of Leagues.</summary>
        [Newtonsoft.Json.JsonProperty("leagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SpecialsFixturesLeague> Leagues
        {
            get { return _leagues; }
            set 
            {
                if (_leagues != value)
                {
                    _leagues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SpecialsFixturesResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialsFixturesResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialsFixturesLeague : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private System.Collections.ObjectModel.ObservableCollection<SpecialFixture> _specials;
    
        /// <summary>FixturesLeague Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of Specials</summary>
        [Newtonsoft.Json.JsonProperty("specials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SpecialFixture> Specials
        {
            get { return _specials; }
            set 
            {
                if (_specials != value)
                {
                    _specials = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SpecialsFixturesLeague FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialsFixturesLeague>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialFixture : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private SpecialFixtureBetType? _betType;
        private string _name;
        private System.DateTime? _date;
        private System.DateTime? _cutoff;
        private string _category;
        private string _units;
        private SpecialFixtureStatus? _status;
        private SpecialsFixturesEvent _event;
        private System.Collections.ObjectModel.ObservableCollection<SpecialsFixturesContestant> _contestants;
    
        /// <summary>Unique Id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The type [MULTI_WAY_HEAD_TO_HEAD, SPREAD, OVER_UNDER]</summary>
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpecialFixtureBetType? BetType
        {
            get { return _betType; }
            set 
            {
                if (_betType != value)
                {
                    _betType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Name of the special.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Date of the special in UTC.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Date
        {
            get { return _date; }
            set 
            {
                if (_date != value)
                {
                    _date = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Wagering cutoff date in UTC.</summary>
        [Newtonsoft.Json.JsonProperty("cutoff", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Cutoff
        {
            get { return _cutoff; }
            set 
            {
                if (_cutoff != value)
                {
                    _cutoff = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The category that the special falls under.</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category
        {
            get { return _category; }
            set 
            {
                if (_category != value)
                {
                    _category = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Measurment in the context of the special. This is applicable to specials bet type spead and over/under. In a hockey special this could be goals.</summary>
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units
        {
            get { return _units; }
            set 
            {
                if (_units != value)
                {
                    _units = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Status of the Special 
        /// 
        /// O = This is the starting status of a game. It means that the lines are open for betting, 
        /// H = This status indicates that the lines are temporarily unavailable for betting, 
        /// I = This status indicates that one or more lines have a red circle (a lower maximum bet amount)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpecialFixtureStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpecialsFixturesEvent Event
        {
            get { return _event; }
            set 
            {
                if (_event != value)
                {
                    _event = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ContestantLines available for wagering.</summary>
        [Newtonsoft.Json.JsonProperty("contestants", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SpecialsFixturesContestant> Contestants
        {
            get { return _contestants; }
            set 
            {
                if (_contestants != value)
                {
                    _contestants = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SpecialFixture FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialFixture>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Optional event asscoaited with the special.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialsFixturesEvent : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private int? _periodNumber;
    
        /// <summary>Event Id</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The period of the match. For example in soccer 0 (Game), 1 (1st Half) & 2 (2nd Half)</summary>
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber
        {
            get { return _periodNumber; }
            set 
            {
                if (_periodNumber != value)
                {
                    _periodNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SpecialsFixturesEvent FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialsFixturesEvent>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialsFixturesContestant : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private string _name;
        private int? _rotNum;
    
        /// <summary>Contestant Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Name of the contestant.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set 
            {
                if (_name != value)
                {
                    _name = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Rotation Number.</summary>
        [Newtonsoft.Json.JsonProperty("rotNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RotNum
        {
            get { return _rotNum; }
            set 
            {
                if (_rotNum != value)
                {
                    _rotNum = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SpecialsFixturesContestant FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialsFixturesContestant>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Response dto for SettledSpecials request</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SettledSpecialsResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _sportId;
        private long? _last;
        private System.Collections.ObjectModel.ObservableCollection<SettledSpecialsLeague> _leagues;
    
        /// <summary>Id of a sport for which to retrieve the odds.</summary>
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Last index for the settled fixture</summary>
        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Last
        {
            get { return _last; }
            set 
            {
                if (_last != value)
                {
                    _last = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>List of Leagues.</summary>
        [Newtonsoft.Json.JsonProperty("leagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SettledSpecialsLeague> Leagues
        {
            get { return _leagues; }
            set 
            {
                if (_leagues != value)
                {
                    _leagues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SettledSpecialsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SettledSpecialsResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>League Dto to hold all settled specials for the league</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SettledSpecialsLeague : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private System.Collections.ObjectModel.ObservableCollection<SettledSpecial> _specials;
    
        /// <summary>League Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of Settled Specials</summary>
        [Newtonsoft.Json.JsonProperty("specials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SettledSpecial> Specials
        {
            get { return _specials; }
            set 
            {
                if (_specials != value)
                {
                    _specials = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SettledSpecialsLeague FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SettledSpecialsLeague>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Settled Special</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SettledSpecial : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private int? _status;
        private long? _settlementId;
        private System.DateTime? _settledAt;
        private CancellationReason _cancellationReason;
    
        /// <summary>Id for the Settled Special</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Status of the settled special.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id for the Settled Special</summary>
        [Newtonsoft.Json.JsonProperty("settlementId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SettlementId
        {
            get { return _settlementId; }
            set 
            {
                if (_settlementId != value)
                {
                    _settlementId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Settled DateTime</summary>
        [Newtonsoft.Json.JsonProperty("settledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? SettledAt
        {
            get { return _settledAt; }
            set 
            {
                if (_settledAt != value)
                {
                    _settledAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Cancellation Reason for Special Event</summary>
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReason CancellationReason
        {
            get { return _cancellationReason; }
            set 
            {
                if (_cancellationReason != value)
                {
                    _cancellationReason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SettledSpecial FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SettledSpecial>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialLineResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private SpecialLineResponseStatus? _status;
        private long? _specialId;
        private long? _contestantId;
        private double? _minRiskStake;
        private double? _maxRiskStake;
        private double? _minWinStake;
        private double? _maxWinStake;
        private long? _lineId;
        private double? _price;
        private double? _handicap;
    
        /// <summary>Status [SUCCESS = OK, NOT_EXISTS = Line not offered anymore]</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpecialLineResponseStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Special Id.</summary>
        [Newtonsoft.Json.JsonProperty("specialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SpecialId
        {
            get { return _specialId; }
            set 
            {
                if (_specialId != value)
                {
                    _specialId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contestant Id.</summary>
        [Newtonsoft.Json.JsonProperty("contestantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ContestantId
        {
            get { return _contestantId; }
            set 
            {
                if (_contestantId != value)
                {
                    _contestantId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Minimum bettable risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("minRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinRiskStake
        {
            get { return _minRiskStake; }
            set 
            {
                if (_minRiskStake != value)
                {
                    _minRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum bettable risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("maxRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxRiskStake
        {
            get { return _maxRiskStake; }
            set 
            {
                if (_maxRiskStake != value)
                {
                    _maxRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Minimum bettable win amount.</summary>
        [Newtonsoft.Json.JsonProperty("minWinStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinWinStake
        {
            get { return _minWinStake; }
            set 
            {
                if (_minWinStake != value)
                {
                    _minWinStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum bettable win amount.</summary>
        [Newtonsoft.Json.JsonProperty("maxWinStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxWinStake
        {
            get { return _maxWinStake; }
            set 
            {
                if (_maxWinStake != value)
                {
                    _maxWinStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Line identification needed to place a bet.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Latest price.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Handicap.</summary>
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Handicap
        {
            get { return _handicap; }
            set 
            {
                if (_handicap != value)
                {
                    _handicap = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SpecialLineResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialLineResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialOddsResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _sportId;
        private long? _last;
        private System.Collections.ObjectModel.ObservableCollection<SpecialOddsLeague> _leagues;
    
        /// <summary>Id of a sport for which to retrieve the odds.</summary>
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Used for retrieving changes only on subsequent requests. Provide this value as the Since paramter in subsequent calls to only retrieve changes.</summary>
        [Newtonsoft.Json.JsonProperty("last", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Last
        {
            get { return _last; }
            set 
            {
                if (_last != value)
                {
                    _last = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contains a list of Leagues.</summary>
        [Newtonsoft.Json.JsonProperty("leagues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SpecialOddsLeague> Leagues
        {
            get { return _leagues; }
            set 
            {
                if (_leagues != value)
                {
                    _leagues = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SpecialOddsResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialOddsResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialOddsLeague : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id;
        private System.Collections.ObjectModel.ObservableCollection<SpecialOddsSpecial> _specials;
    
        /// <summary>League id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of FixturesSpecial.</summary>
        [Newtonsoft.Json.JsonProperty("specials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SpecialOddsSpecial> Specials
        {
            get { return _specials; }
            set 
            {
                if (_specials != value)
                {
                    _specials = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SpecialOddsLeague FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialOddsLeague>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialOddsSpecial : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private double? _minRisk;
        private double? _maxRisk;
        private double? _maxBet;
        private System.Collections.ObjectModel.ObservableCollection<SpecialOddsContestantLine> _contestantLines;
        private double? _minWin;
        private double? _maxWin;
    
        /// <summary>Special Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Minimum risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("minRisk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinRisk
        {
            get { return _minRisk; }
            set 
            {
                if (_minRisk != value)
                {
                    _minRisk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("maxRisk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxRisk
        {
            get { return _maxRisk; }
            set 
            {
                if (_maxRisk != value)
                {
                    _maxRisk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("maxBet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxBet
        {
            get { return _maxBet; }
            set 
            {
                if (_maxBet != value)
                {
                    _maxBet = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>ContestantLines available for wagering on.</summary>
        [Newtonsoft.Json.JsonProperty("contestantLines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SpecialOddsContestantLine> ContestantLines
        {
            get { return _contestantLines; }
            set 
            {
                if (_contestantLines != value)
                {
                    _contestantLines = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Minimum win amount.</summary>
        [Newtonsoft.Json.JsonProperty("minWin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinWin
        {
            get { return _minWin; }
            set 
            {
                if (_minWin != value)
                {
                    _minWin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum win amount.</summary>
        [Newtonsoft.Json.JsonProperty("maxWin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxWin
        {
            get { return _maxWin; }
            set 
            {
                if (_maxWin != value)
                {
                    _maxWin = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SpecialOddsSpecial FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialOddsSpecial>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialOddsContestantLine : System.ComponentModel.INotifyPropertyChanged
    {
        private long? _id;
        private long? _lineId;
        private double? _price;
        private double? _handicap;
        private double? _vig;
    
        /// <summary>ContestantLine Id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Id
        {
            get { return _id; }
            set 
            {
                if (_id != value)
                {
                    _id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Line identifier required for placing a bet.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Price of the line.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A number indicating the spread, over/under etc.</summary>
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Handicap
        {
            get { return _handicap; }
            set 
            {
                if (_handicap != value)
                {
                    _handicap = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Vig Percentage</summary>
        [Newtonsoft.Json.JsonProperty("vig", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Vig
        {
            get { return _vig; }
            set 
            {
                if (_vig != value)
                {
                    _vig = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SpecialOddsContestantLine FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialOddsContestantLine>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Format in which we return the odds. Default is American. [American, Decimal, HongKong, Indonesian, Malay]</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OddsFormat2
    {
        [System.Runtime.Serialization.EnumMember(Value = "American")]
        American = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Decimal")]
        Decimal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HongKong")]
        HongKong = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Indonesian")]
        Indonesian = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Malay")]
        Malay = 4,
    
    }
    
    /// <summary>Format the odds are returned in. [American, Decimal, HongKong, Indonesian, Malay]</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OddsFormat3
    {
        [System.Runtime.Serialization.EnumMember(Value = "American")]
        American = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Decimal")]
        Decimal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HongKong")]
        HongKong = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Indonesian")]
        Indonesian = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Malay")]
        Malay = 4,
    
    }
    
    /// <summary>Format in which we return the odds. Default is American.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OddsFormat4
    {
        [System.Runtime.Serialization.EnumMember(Value = "American")]
        American = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Decimal")]
        Decimal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HongKong")]
        HongKong = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Indonesian")]
        Indonesian = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Malay")]
        Malay = 4,
    
    }
    
    /// <summary>Bet Type</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "SPREAD")]
        SPREAD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MONEYLINE")]
        MONEYLINE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOTAL_POINTS")]
        TOTAL_POINTS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "TEAM_TOTAL_POINTS")]
        TEAM_TOTAL_POINTS = 3,
    
    }
    
    /// <summary>Chosen team type. This is needed only for SPREAD, MONEYLINE and TEAM_TOTAL_POINTS bet types</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Team
    {
        [System.Runtime.Serialization.EnumMember(Value = "Team1")]
        Team1 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Team2")]
        Team2 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Draw")]
        Draw = 2,
    
    }
    
    /// <summary>Chosen side. This is needed only for TOTAL_POINTS and TEAM_TOTAL_POINTS</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Side
    {
        [System.Runtime.Serialization.EnumMember(Value = "OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UNDER")]
        UNDER = 1,
    
    }
    
    /// <summary>Format the odds are returned in. [American, Decimal, HongKong, Indonesian, Malay]</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OddsFormat5
    {
        [System.Runtime.Serialization.EnumMember(Value = "American")]
        American = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Decimal")]
        Decimal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HongKong")]
        HongKong = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Indonesian")]
        Indonesian = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Malay")]
        Malay = 4,
    
    }
    
    /// <summary>Format the odds are returned in. [American, Decimal, HongKong, Indonesian, Malay]</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OddsFormat6
    {
        [System.Runtime.Serialization.EnumMember(Value = "American")]
        American = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Decimal")]
        Decimal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HongKong")]
        HongKong = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Indonesian")]
        Indonesian = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Malay")]
        Malay = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FixtureLiveStatus
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FixtureStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "O")]
        O = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "H")]
        H = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "I")]
        I = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FixtureParlayRestriction
    {
        _0 = 0,
    
        _1 = 1,
    
        _2 = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SettledFixturesPeriodStatus
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum InRunningEventState
    {
        _1 = 1,
    
        _2 = 2,
    
        _3 = 3,
    
        _4 = 4,
    
        _5 = 5,
    
        _6 = 6,
    
        _7 = 7,
    
        _8 = 8,
    
        _9 = 9,
    
        _10 = 10,
    
        _11 = 11,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum LineResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "SUCCESS")]
        SUCCESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "NOT_EXISTS")]
        NOT_EXISTS = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLinesRequestOddsFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = "American")]
        American = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Decimal")]
        Decimal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HongKong")]
        HongKong = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Indonesian")]
        Indonesian = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Malay")]
        Malay = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLineRequestLegBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "SPREAD")]
        SPREAD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MONEYLINE")]
        MONEYLINE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOTAL_POINTS")]
        TOTAL_POINTS = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLineRequestTeam
    {
        [System.Runtime.Serialization.EnumMember(Value = "Team1")]
        Team1 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Team2")]
        Team2 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "Draw")]
        Draw = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLineRequestSide
    {
        [System.Runtime.Serialization.EnumMember(Value = "OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLinesResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "VALID")]
        VALID = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 1,
    
    }
      
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLineLegStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "VALID")]
        VALID = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLineLegErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "CORRELATED")]
        CORRELATED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CANNOT_PARLAY_LIVE_GAME")]
        CANNOT_PARLAY_LIVE_GAME = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "EVENT_NO_LONGER_AVAILABLE_FOR_BETTING")]
        EVENT_NO_LONGER_AVAILABLE_FOR_BETTING = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "EVENT_NOT_OFFERED_FOR_PARLAY")]
        EVENT_NOT_OFFERED_FOR_PARLAY = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "LINE_DOES_NOT_BELONG_TO_EVENT")]
        LINE_DOES_NOT_BELONG_TO_EVENT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "WAGER_TYPE_NO_LONGER_AVAILABLE_FOR_BETTING")]
        WAGER_TYPE_NO_LONGER_AVAILABLE_FOR_BETTING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "WAGER_TYPE_NOT_VALID_FOR_PARLAY")]
        WAGER_TYPE_NOT_VALID_FOR_PARLAY = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "WAGER_TYPE_CONFLICTS_WITH_OTHER_LEG")]
        WAGER_TYPE_CONFLICTS_WITH_OTHER_LEG = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum LinesRequestTeaserOddsFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = "American")]
        American = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Decimal")]
        Decimal = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HongKong")]
        HongKong = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "Indonesian")]
        Indonesian = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "Malay")]
        Malay = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TeaserLineRequestBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "SPREAD")]
        SPREAD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOTAL_POINTS")]
        TOTAL_POINTS = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TeaserLineRequestTeam
    {
        [System.Runtime.Serialization.EnumMember(Value = "Team1")]
        Team1 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "Team2")]
        Team2 = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TeaserLineRequestSide
    {
        [System.Runtime.Serialization.EnumMember(Value = "OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TeaserLinesResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "VALID")]
        VALID = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TeaserLinesResponseErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_LEGS")]
        INVALID_LEGS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAME_EVENT_ONLY_REQUIRED")]
        SAME_EVENT_ONLY_REQUIRED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TEASER_DISABLED")]
        TEASER_DISABLED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "TEASER_DOES_NOT_EXIST")]
        TEASER_DOES_NOT_EXIST = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOO_FEW_LEGS")]
        TOO_FEW_LEGS = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOO_MANY_LEGS")]
        TOO_MANY_LEGS = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "UNKNOWN")]
        UNKNOWN = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TeaserLineLegStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "VALID")]
        VALID = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TeaserLineLegErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "EVENT_NOT_FOUND")]
        EVENT_NOT_FOUND = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "POINTS_NO_LONGER_AVAILABLE")]
        POINTS_NO_LONGER_AVAILABLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "UNKNOWN")]
        UNKNOWN = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "WAGER_TYPE_NOT_VALID_FOR_TEASER")]
        WAGER_TYPE_NOT_VALID_FOR_TEASER = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SpecialFixtureBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "MULTI_WAY_HEAD_TO_HEAD")]
        MULTI_WAY_HEAD_TO_HEAD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SPREAD")]
        SPREAD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "OVER_UNDER")]
        OVER_UNDER = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SpecialFixtureStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "O")]
        O = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "H")]
        H = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "I")]
        I = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SpecialLineResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "SUCCESS")]
        SUCCESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "NOT_EXISTS")]
        NOT_EXISTS = 1,
    
    }
}