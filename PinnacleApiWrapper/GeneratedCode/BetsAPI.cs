//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.13.2.0 (NJsonSchema v9.10.21.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace PinnacleApiWrapper
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.13.2.0 (NJsonSchema v9.10.21.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class PinnacleWrapper 
    {
        private string _baseUrl = "https://api.pinnacle.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public PinnacleWrapper(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Place straight bet v1</summary>
        /// <param name="request">The Place StraightBet request.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<PlaceBetResponse> StraightAsync(PlaceBetRequest request)
        {
            return StraightAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Place straight bet v1</summary>
        /// <param name="request">The Place StraightBet request.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        [System.Obsolete]
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PlaceBetResponse> StraightAsync(PlaceBetRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/bets/place");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PlaceBetResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceBetResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponseWithErrorRef); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseWithErrorRef>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponseWithErrorRef>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PlaceBetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Place straight bet  - v2</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PlaceBetResponseV2> StraightV2Async(PlaceBetRequest request)
        {
            return StraightV2Async(request, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Place straight bet  - v2</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PlaceBetResponseV2> StraightV2Async(PlaceBetRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/bets/straight");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PlaceBetResponseV2); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceBetResponseV2>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponseWithErrorRef); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseWithErrorRef>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponseWithErrorRef>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PlaceBetResponseV2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Place parlay bet.</summary>
        /// <param name="request">The Parlay request.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PlaceParlayBetResponse> ParlayAsync(PlaceParlayBetRequest request)
        {
            return ParlayAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Place parlay bet.</summary>
        /// <param name="request">The Parlay request.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PlaceParlayBetResponse> ParlayAsync(PlaceParlayBetRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/bets/parlay");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PlaceParlayBetResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceParlayBetResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponseWithErrorRef); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseWithErrorRef>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponseWithErrorRef>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PlaceParlayBetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Place teaser bet.</summary>
        /// <param name="request">The PlaceTeaser request.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PlaceTeaserBetResponse> TeaserAsync(PlaceTeaserBetRequest request)
        {
            return TeaserAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Place teaser bet.</summary>
        /// <param name="request">The PlaceTeaser request.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PlaceTeaserBetResponse> TeaserAsync(PlaceTeaserBetRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/bets/teaser");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PlaceTeaserBetResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceTeaserBetResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponseWithErrorRef); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseWithErrorRef>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponseWithErrorRef>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PlaceTeaserBetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Place specials bet.</summary>
        /// <param name="request">The SpecialBet request.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MultiBetResponseOfSpecialBetResponse> SpecialAsync(MultiBetRequestOfSpecialBetRequest request)
        {
            return SpecialAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Place specials bet.</summary>
        /// <param name="request">The SpecialBet request.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<MultiBetResponseOfSpecialBetResponse> SpecialAsync(MultiBetRequestOfSpecialBetRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/bets/special");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(MultiBetResponseOfSpecialBetResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<MultiBetResponseOfSpecialBetResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponseWithErrorRef); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseWithErrorRef>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponseWithErrorRef>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(MultiBetResponseOfSpecialBetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Bets - v2</summary>
        /// <param name="betlist">Type of bet list to return. Not needed when betids is submitted.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Difference between fromDate and toDdate can’t be more than 30 days. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="betids">A comma separated list of bet ids. When betids is submitted, no other parameter is necessary. Maximum is 100 ids. Works for all non settled bets and all bets settled in the last 30 days.</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview)for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetBetsByTypeResponse> GetBetsByTypeAsync(Betlist? betlist, string fromDate, string toDate, System.Collections.Generic.IEnumerable<long> betids, System.Collections.Generic.IEnumerable<string> uniqueRequestIds)
        {
            return GetBetsByTypeAsync(betlist, fromDate, toDate, betids, uniqueRequestIds, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Bets - v2</summary>
        /// <param name="betlist">Type of bet list to return. Not needed when betids is submitted.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Difference between fromDate and toDdate can’t be more than 30 days. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="betids">A comma separated list of bet ids. When betids is submitted, no other parameter is necessary. Maximum is 100 ids. Works for all non settled bets and all bets settled in the last 30 days.</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview)for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GetBetsByTypeResponse> GetBetsByTypeAsync(Betlist? betlist, string fromDate, string toDate, System.Collections.Generic.IEnumerable<long> betids, System.Collections.Generic.IEnumerable<string> uniqueRequestIds, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/bets?");
            if (betlist != null) urlBuilder_.Append("betlist=").Append(System.Uri.EscapeDataString(ConvertToString(betlist, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (fromDate != null) urlBuilder_.Append("fromDate=").Append(System.Uri.EscapeDataString(ConvertToString(fromDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (toDate != null) urlBuilder_.Append("toDate=").Append(System.Uri.EscapeDataString(ConvertToString(toDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (betids != null)
            {
                urlBuilder_.Append("betids=");
                foreach (var item_ in betids)
                {
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append(",");
                }
            }

            if (uniqueRequestIds != null) foreach (var item_ in uniqueRequestIds) { urlBuilder_.Append("uniqueRequestIds=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(GetBetsByTypeResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GetBetsByTypeResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponseWithErrorRef); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseWithErrorRef>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponseWithErrorRef>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(GetBetsByTypeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Betting Status</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BettingStatusResponse> GetBettingStatusAsync()
        {
            return GetBettingStatusAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Get Betting Status</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BettingStatusResponse> GetBettingStatusAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/bets/betting-status");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(BettingStatusResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BettingStatusResponse>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("BadRequest", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Unauthorized", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponse); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponse>("Forbidden", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(ErrorResponseWithErrorRef); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseWithErrorRef>(responseData_, _settings.Value);
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                            throw new SwaggerException<ErrorResponseWithErrorRef>("InternalServerError", status_, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(BettingStatusResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
    
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    /// <summary>Request to place a bet.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PlaceBetRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private OddsFormat? _oddsFormat;
        private System.Guid? _uniqueRequestId;
        private bool? _acceptBetterLine;
        private double? _stake;
        private PlaceBetRequestWinRiskStake? _winRiskStake;
        private long? _lineId;
        private long? _altLineId;
        private bool? _pitcher1MustStart;
        private bool? _pitcher2MustStart;
        private PlaceBetRequestFillType? _fillType = PinnacleApiWrapper.PlaceBetRequestFillType.NORMAL;
        private int? _sportId;
        private long? _eventId;
        private int? _periodNumber;
        private PlaceBetRequestBetType? _betType;
        private PlaceBetRequestTeam? _team;
        private PlaceBetRequestSide? _side;
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat? OddsFormat
        {
            get { return _oddsFormat; }
            set 
            {
                if (_oddsFormat != value)
                {
                    _oddsFormat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>This is a Unique ID for PlaceBet requests. This is to support idempotent requests.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId
        {
            get { return _uniqueRequestId; }
            set 
            {
                if (_uniqueRequestId != value)
                {
                    _uniqueRequestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether or not to accept a bet when there is a line change in favor of the client.</summary>
        [Newtonsoft.Json.JsonProperty("acceptBetterLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcceptBetterLine
        {
            get { return _acceptBetterLine; }
            set 
            {
                if (_acceptBetterLine != value)
                {
                    _acceptBetterLine = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>amount in client’s currency.</summary>
        [Newtonsoft.Json.JsonProperty("stake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Stake
        {
            get { return _stake; }
            set 
            {
                if (_stake != value)
                {
                    _stake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the stake amount is risk or win amount.</summary>
        [Newtonsoft.Json.JsonProperty("winRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestWinRiskStake? WinRiskStake
        {
            get { return _winRiskStake; }
            set 
            {
                if (_winRiskStake != value)
                {
                    _winRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Line identification.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Alternate line identification.</summary>
        [Newtonsoft.Json.JsonProperty("altLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AltLineId
        {
            get { return _altLineId; }
            set 
            {
                if (_altLineId != value)
                {
                    _altLineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Baseball only. Refers to the pitcher for Team1. This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher1MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher1MustStart
        {
            get { return _pitcher1MustStart; }
            set 
            {
                if (_pitcher1MustStart != value)
                {
                    _pitcher1MustStart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Baseball only. Refers to the pitcher for Team2. This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher2MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher2MustStart
        {
            get { return _pitcher2MustStart; }
            set 
            {
                if (_pitcher2MustStart != value)
                {
                    _pitcher2MustStart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>NORMAL - bet will be placed on specified stake.  
        /// FILLANDKILL - If the stake is over the max limit, bet will be placed on max limit, otherwise it will be placed on specified stake.  
        /// FILLMAXLIMIT - bet will be places on max limit, stake amount will be ignored. Please note that maximum limits can change at any moment, which may result in risking more than anticipated. This option is replacement of isMaxStakeBet from v1/bets/place'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fillType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestFillType? FillType
        {
            get { return _fillType; }
            set 
            {
                if (_fillType != value)
                {
                    _fillType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId
        {
            get { return _eventId; }
            set 
            {
                if (_eventId != value)
                {
                    _eventId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber
        {
            get { return _periodNumber; }
            set 
            {
                if (_periodNumber != value)
                {
                    _periodNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Bet type.</summary>
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestBetType? BetType
        {
            get { return _betType; }
            set 
            {
                if (_betType != value)
                {
                    _betType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Team type.</summary>
        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestTeam? Team
        {
            get { return _team; }
            set 
            {
                if (_team != value)
                {
                    _team = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Side type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestSide? Side
        {
            get { return _side; }
            set 
            {
                if (_side != value)
                {
                    _side = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PlaceBetRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceBetRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PlaceBetResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private PlaceBetResponseStatus? _status;
        private PlaceBetResponseErrorCode? _errorCode;
        private long? _betId;
        private System.Guid? _uniqueRequestId;
        private bool? _betterLineWasAccepted;
        private double? _price;
    
        /// <summary>Status of the response.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetResponseStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If Status is PROCESSED_WITH_ERROR, errorCode will be in the response. 
        /// 
        /// 
        /// ALL_BETTING_CLOSED = Betting is not allowed at this moment. This may happen during system maintenance,  
        /// ALL_LIVE_BETTING_CLOSED = Live betting is not allowed at this moment. This may happen during system maintenance,  
        /// ABOVE_EVENT_MAX = Bet cannot be placed because client exceeded allowed maximum of risk on a line,  
        /// ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,  
        /// BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,  
        /// BLOCKED_BETTING = Betting is suspended for the client,  
        /// BLOCKED_CLIENT = Client is no longer active,  
        /// INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,  
        /// INVALID_COUNTRY = Client country is not allowed for betting,  
        /// INVALID_EVENT = Invalid eventid,  
        /// INVALID_ODDS_FORMAT = If a bet was submitted with the odds format that is not allowed for the client,  
        /// LINE_CHANGED = Bet is submitted on a line that has changed,  
        /// LISTED_PITCHERS_SELECTION_ERROR = If bet was submitted with pitcher1MustStart and/or pitcher2MustStart parameters in Place Bet request with values that are not allowed,  
        /// OFFLINE_EVENT = Bet is submitted on a event that is offline or the submitted line is not offered at the moment due to points/handicap change or the submitted bet type is just not offered at the moment,  
        /// PAST_CUTOFFTIME = Bet is submitted on a game after the betting cutoff time,  
        /// RED_CARDS_CHANGED = Bet is submitted on a live soccer event with changed red card count,  
        /// SCORE_CHANGED = Bet is submitted on a live soccer event with changed score,  
        /// TIME_RESTRICTION = Bet is submitted within too short of a period from the same bet previously placed by a client,  
        /// DUPLICATE_UNIQUE_REQUEST_ID = REquest with the same uniqueRequestId was already processed. Please set the new value if you still want the request to be processed,  
        /// INCOMPLETE_CUSTOMER_BETTING_PROFILE = System configuration issue,  
        /// INVALID_CUSTOMER_PROFILE = System configuration issue,   
        /// LIMITS_CONFIGURATION_ISSUE = System configuration issue,   
        /// RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Client has reached his total loss limit,  
        /// RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Client has reached his total risk limit,  
        /// RESUBMIT_REQUEST = Unable to process the request but the request itself is valid. This happens more often on the live betting in situations when there is more than one place bet request at the same on the same line. When this happens, we don't keep the place bet request on the server until we know if we can accept or reject the bet, but instead we return the error. It's very likely that the line will change after that. To reduce a chance of getting RESUBMIT_REQUEST client can try to place a bet as fast as possible,  
        /// SYSTEM_ERROR_3 = Unexpected error,  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetResponseErrorCode? ErrorCode
        {
            get { return _errorCode; }
            set 
            {
                if (_errorCode != value)
                {
                    _errorCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The bet ID of the new bet. May be empty on failure.</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BetId
        {
            get { return _betId; }
            set 
            {
                if (_betId != value)
                {
                    _betId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Echo of the uniqueRequestId from the request.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId
        {
            get { return _uniqueRequestId; }
            set 
            {
                if (_uniqueRequestId != value)
                {
                    _uniqueRequestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether or not the bet was accepted on the line that changed in favour of client.
        /// This can be true only if acceptBetterLine in the Place Bet request is set to TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("betterLineWasAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BetterLineWasAccepted
        {
            get { return _betterLineWasAccepted; }
            set 
            {
                if (_betterLineWasAccepted != value)
                {
                    _betterLineWasAccepted = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>For accepted bets, this will have the price at which the wager is accepted</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PlaceBetResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceBetResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ErrorResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private ErrorResponseCode? _code;
        private string _message;
    
        /// <summary>INVALID_REQUEST_DATA  = Invalid request parameters (http status 400)  
        /// INVALID_CREDENTIALS = Authorization failed, invalid credentials (http status 401)  
        /// INVALID_AUTHORIZATION_HEADER = HTTP Authorization header is missing (http status 401) 
        /// ACCOUNT_INACTIVE = Client's account is not active  (http status 403)  
        /// NO_API_ACCESS = Account not permitted to access the API  (http status 403) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ErrorResponseCode? Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ErrorResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PlaceBetResponseV2 : System.ComponentModel.INotifyPropertyChanged
    {
        private PlaceBetResponseV2Status? _status;
        private PlaceBetResponseV2ErrorCode? _errorCode;
        private string _uniqueRequestId;
        private StraightBet _straightBet;
    
        /// <summary>Status of the response.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetResponseV2Status? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If Status is PROCESSED_WITH_ERROR, errorCode will be in the response. 
        /// 
        /// ALL_BETTING_CLOSED = Betting is not allowed at this moment. This may happen during system maintenance,  
        /// ALL_LIVE_BETTING_CLOSED = Live betting is not allowed at this moment. This may happen during system maintenance,  
        /// ABOVE_EVENT_MAX = Bet cannot be placed because client exceeded allowed maximum of risk on a line,  
        /// ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,   
        /// BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,  
        /// BLOCKED_BETTING = Betting is suspended for the client,  
        /// BLOCKED_CLIENT = Client is no longer active,   
        /// INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,  
        /// INVALID_COUNTRY = Client country is not allowed for betting,  
        /// INVALID_EVENT = Invalid eventid,  
        /// INVALID_ODDS_FORMAT = If a bet was submitted with the odds format that is not allowed for the client,  
        /// LINE_CHANGED = Bet is submitted on a line that has changed,  
        /// LISTED_PITCHERS_SELECTION_ERROR = If bet was submitted with pitcher1MustStart and/or pitcher2MustStart parameters in Place Bet request with values that are not allowed,  
        /// OFFLINE_EVENT = Bet is submitted on a event that is offline or the submitted line is not offered at the moment due to points/handicap change or the submitted bet type is just not offered at the moment,  
        /// PAST_CUTOFFTIME = Bet is submitted on a game after the betting cutoff time,  
        /// RED_CARDS_CHANGED = Bet is submitted on a live soccer event with changed red card count,  
        /// SCORE_CHANGED = Bet is submitted on a live soccer event with changed score,  
        /// TIME_RESTRICTION = Bet is submitted within too short of a period from the same bet previously placed by a client,  
        /// DUPLICATE_UNIQUE_REQUEST_ID = Request with the same uniqueRequestId was already processed. Please set the new value if you still want the request to be processed,  
        /// INCOMPLETE_CUSTOMER_BETTING_PROFILE = System configuration issue,  
        /// INVALID_CUSTOMER_PROFILE = System configuration issue,  
        /// LIMITS_CONFIGURATION_ISSUE = System configuration issue,  
        /// RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Client has reached his total loss limit,  
        /// RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Client has reached his total risk limit,  
        /// RESUBMIT_REQUEST = Unable to process the request but the request itself is valid. This happens more often on the live betting in situations when there is more than one place bet request at the same on the same line. When this happens, we don't keep the place bet request on the server until we know if we can accept or reject the bet, but instead we return the error. It's very likely that the line will change after that. To reduce a chance of getting RESUBMIT_REQUEST client can try to place a bet as fast as possible,  
        /// SYSTEM_ERROR_3 = Unexpected error,  
        /// LICENCE_RESTRICTION_LIVE_BETTING_BLOCKED - Live betting blocked due to licence restrictions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetResponseV2ErrorCode? ErrorCode
        {
            get { return _errorCode; }
            set 
            {
                if (_errorCode != value)
                {
                    _errorCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Echo of the uniqueRequestId from the request.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueRequestId
        {
            get { return _uniqueRequestId; }
            set 
            {
                if (_uniqueRequestId != value)
                {
                    _uniqueRequestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("straightBet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StraightBet StraightBet
        {
            get { return _straightBet; }
            set 
            {
                if (_straightBet != value)
                {
                    _straightBet = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PlaceBetResponseV2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceBetResponseV2>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class StraightBet : System.ComponentModel.INotifyPropertyChanged
    {
        private long _betId;
        private int _wagerNumber;
        private System.DateTime _placedAt;
        private StraightBetBetStatus _betStatus;
        private StraightBetBetType _betType;
        private decimal _win;
        private decimal _risk;
        private decimal? _winLoss;
        private OddsFormat _oddsFormat;
        private decimal? _customerCommission;
        private CancellationReason _cancellationReason;
        private long _updateSequence;
        private int? _sportId;
        private int? _leagueId;
        private long? _eventId;
        private decimal? _handicap;
        private decimal? _price;
        private string _teamName;
        private StraightBetSide? _side;
        private string _pitcher1;
        private string _pitcher2;
        private StraightBetPitcher1MustStart? _pitcher1MustStart;
        private StraightBetPitcher2MustStart? _pitcher2MustStart;
        private string _team1;
        private string _team2;
        private int? _periodNumber;
        private decimal? _team1Score;
        private decimal? _team2Score;
        private decimal? _ftTeam1Score;
        private decimal? _ftTeam2Score;
        private decimal? _pTeam1Score;
        private decimal? _pTeam2Score;
        private StraightBetIsLive? _isLive;
    
        /// <summary>Bet identification</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Always)]
        public long BetId
        {
            get { return _betId; }
            set 
            {
                if (_betId != value)
                {
                    _betId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("wagerNumber", Required = Newtonsoft.Json.Required.Always)]
        public int WagerNumber
        {
            get { return _wagerNumber; }
            set 
            {
                if (_wagerNumber != value)
                {
                    _wagerNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Date time when the bet was placed.</summary>
        [Newtonsoft.Json.JsonProperty("placedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime PlacedAt
        {
            get { return _placedAt; }
            set 
            {
                if (_placedAt != value)
                {
                    _placedAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Bet Status.  
        /// 
        /// ACCEPTED = Bet was accepted,  
        /// CANCELLED = Bet is cancelled as per Pinnacle betting rules,  
        /// LOSE = The bet is settled as lose,  
        /// PENDING_ACCEPTANCE = This status is reserved only for live bets. If a live bet is placed during danger zone or live delay is applied, it will be in PENDING_ACCEPTANCE , otherwise in ACCEPTED status. From this status bet can go to ACCEPTED or NOT_ACCEPTED status,  
        /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status,  
        /// NOT_ACCEPTED = Bet was not accepted. Bet can be in this status only if it was previously in PENDING_ACCEPTANCE status,  
        /// WON = The bet is settled as won 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("betStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetBetStatus BetStatus
        {
            get { return _betStatus; }
            set 
            {
                if (_betStatus != value)
                {
                    _betStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Bet type.</summary>
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetBetType BetType
        {
            get { return _betType; }
            set 
            {
                if (_betType != value)
                {
                    _betType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Win amount.</summary>
        [Newtonsoft.Json.JsonProperty("win", Required = Newtonsoft.Json.Required.Always)]
        public decimal Win
        {
            get { return _win; }
            set 
            {
                if (_win != value)
                {
                    _win = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("risk", Required = Newtonsoft.Json.Required.Always)]
        public decimal Risk
        {
            get { return _risk; }
            set 
            {
                if (_risk != value)
                {
                    _risk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Win-Loss for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("winLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? WinLoss
        {
            get { return _winLoss; }
            set 
            {
                if (_winLoss != value)
                {
                    _winLoss = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat OddsFormat
        {
            get { return _oddsFormat; }
            set 
            {
                if (_oddsFormat != value)
                {
                    _oddsFormat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Client’s commission on the bet.</summary>
        [Newtonsoft.Json.JsonProperty("customerCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CustomerCommission
        {
            get { return _customerCommission; }
            set 
            {
                if (_customerCommission != value)
                {
                    _customerCommission = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReason CancellationReason
        {
            get { return _cancellationReason; }
            set 
            {
                if (_cancellationReason != value)
                {
                    _cancellationReason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Update Sequence</summary>
        [Newtonsoft.Json.JsonProperty("updateSequence", Required = Newtonsoft.Json.Required.Default)]
        public long UpdateSequence
        {
            get { return _updateSequence; }
            set 
            {
                if (_updateSequence != value)
                {
                    _updateSequence = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("leagueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeagueId
        {
            get { return _leagueId; }
            set 
            {
                if (_leagueId != value)
                {
                    _leagueId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId
        {
            get { return _eventId; }
            set 
            {
                if (_eventId != value)
                {
                    _eventId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Handicap
        {
            get { return _handicap; }
            set 
            {
                if (_handicap != value)
                {
                    _handicap = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeamName
        {
            get { return _teamName; }
            set 
            {
                if (_teamName != value)
                {
                    _teamName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Side type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetSide? Side
        {
            get { return _side; }
            set 
            {
                if (_side != value)
                {
                    _side = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Pitcher name of team1. Only for bets on baseball.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pitcher1
        {
            get { return _pitcher1; }
            set 
            {
                if (_pitcher1 != value)
                {
                    _pitcher1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Pitcher name of team2. Only for bets on baseball.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pitcher2
        {
            get { return _pitcher2; }
            set 
            {
                if (_pitcher2 != value)
                {
                    _pitcher2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the team1 pitcher must start. Only for bets on baseball.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher1MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetPitcher1MustStart? Pitcher1MustStart
        {
            get { return _pitcher1MustStart; }
            set 
            {
                if (_pitcher1MustStart != value)
                {
                    _pitcher1MustStart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the team1 pitcher must start. Only for bets on baseball.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher2MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetPitcher2MustStart? Pitcher2MustStart
        {
            get { return _pitcher2MustStart; }
            set 
            {
                if (_pitcher2MustStart != value)
                {
                    _pitcher2MustStart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("team1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team1
        {
            get { return _team1; }
            set 
            {
                if (_team1 != value)
                {
                    _team1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("team2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team2
        {
            get { return _team2; }
            set 
            {
                if (_team2 != value)
                {
                    _team2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber
        {
            get { return _periodNumber; }
            set 
            {
                if (_periodNumber != value)
                {
                    _periodNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Team 1 score that the bet was placed on, only for live bets.</summary>
        [Newtonsoft.Json.JsonProperty("team1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Team1Score
        {
            get { return _team1Score; }
            set 
            {
                if (_team1Score != value)
                {
                    _team1Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Team 2 score that the bet was placed, only for live bets.</summary>
        [Newtonsoft.Json.JsonProperty("team2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Team2Score
        {
            get { return _team2Score; }
            set 
            {
                if (_team2Score != value)
                {
                    _team2Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Full time team 1 score, only for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("ftTeam1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FtTeam1Score
        {
            get { return _ftTeam1Score; }
            set 
            {
                if (_ftTeam1Score != value)
                {
                    _ftTeam1Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Full time team 2 score, only for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("ftTeam2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FtTeam2Score
        {
            get { return _ftTeam2Score; }
            set 
            {
                if (_ftTeam2Score != value)
                {
                    _ftTeam2Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>.End of period team 1 score, only for settled bets. If the bet was placed on Game period (periodNumber =0) , this will be null . </summary>
        [Newtonsoft.Json.JsonProperty("pTeam1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? PTeam1Score
        {
            get { return _pTeam1Score; }
            set 
            {
                if (_pTeam1Score != value)
                {
                    _pTeam1Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>End of period team 2 score, only for settled bets. If the bet was placed on Game period (periodNumber =0) , this will be null</summary>
        [Newtonsoft.Json.JsonProperty("pTeam2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? PTeam2Score
        {
            get { return _pTeam2Score; }
            set 
            {
                if (_pTeam2Score != value)
                {
                    _pTeam2Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the bet is on live event</summary>
        [Newtonsoft.Json.JsonProperty("isLive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetIsLive? IsLive
        {
            get { return _isLive; }
            set 
            {
                if (_isLive != value)
                {
                    _isLive = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static StraightBet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StraightBet>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CancellationReason : System.ComponentModel.INotifyPropertyChanged
    {
        private string _code;
        private CancellationDetails _details;
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationDetails Details
        {
            get { return _details; }
            set 
            {
                if (_details != value)
                {
                    _details = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CancellationReason FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancellationReason>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class CancellationDetails : System.ComponentModel.INotifyPropertyChanged
    {
        private string _correctTeam1Id;
        private string _correctTeam2Id;
        private string _correctListedPitcher1;
        private string _correctListedPitcher2;
        private string _correctSpread;
        private string _correctTotalPoints;
        private string _correctTeam1TotalPoints;
        private string _correctTeam2TotalPoints;
        private string _correctTeam1Score;
        private string _correctTeam2Score;
        private string _correctTeam1TennisSetsScore;
        private string _correctTeam2TennisSetsScore;
    
        [Newtonsoft.Json.JsonProperty("correctTeam1Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrectTeam1Id
        {
            get { return _correctTeam1Id; }
            set 
            {
                if (_correctTeam1Id != value)
                {
                    _correctTeam1Id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("correctTeam2Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrectTeam2Id
        {
            get { return _correctTeam2Id; }
            set 
            {
                if (_correctTeam2Id != value)
                {
                    _correctTeam2Id = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("correctListedPitcher1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrectListedPitcher1
        {
            get { return _correctListedPitcher1; }
            set 
            {
                if (_correctListedPitcher1 != value)
                {
                    _correctListedPitcher1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("correctListedPitcher2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrectListedPitcher2
        {
            get { return _correctListedPitcher2; }
            set 
            {
                if (_correctListedPitcher2 != value)
                {
                    _correctListedPitcher2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("correctSpread", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrectSpread
        {
            get { return _correctSpread; }
            set 
            {
                if (_correctSpread != value)
                {
                    _correctSpread = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("correctTotalPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrectTotalPoints
        {
            get { return _correctTotalPoints; }
            set 
            {
                if (_correctTotalPoints != value)
                {
                    _correctTotalPoints = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("correctTeam1TotalPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrectTeam1TotalPoints
        {
            get { return _correctTeam1TotalPoints; }
            set 
            {
                if (_correctTeam1TotalPoints != value)
                {
                    _correctTeam1TotalPoints = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("correctTeam2TotalPoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrectTeam2TotalPoints
        {
            get { return _correctTeam2TotalPoints; }
            set 
            {
                if (_correctTeam2TotalPoints != value)
                {
                    _correctTeam2TotalPoints = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("correctTeam1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrectTeam1Score
        {
            get { return _correctTeam1Score; }
            set 
            {
                if (_correctTeam1Score != value)
                {
                    _correctTeam1Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("correctTeam2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrectTeam2Score
        {
            get { return _correctTeam2Score; }
            set 
            {
                if (_correctTeam2Score != value)
                {
                    _correctTeam2Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("correctTeam1TennisSetsScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrectTeam1TennisSetsScore
        {
            get { return _correctTeam1TennisSetsScore; }
            set 
            {
                if (_correctTeam1TennisSetsScore != value)
                {
                    _correctTeam1TennisSetsScore = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("correctTeam2TennisSetsScore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CorrectTeam2TennisSetsScore
        {
            get { return _correctTeam2TennisSetsScore; }
            set 
            {
                if (_correctTeam2TennisSetsScore != value)
                {
                    _correctTeam2TennisSetsScore = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CancellationDetails FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CancellationDetails>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ErrorResponseWithErrorRef : System.ComponentModel.INotifyPropertyChanged
    {
        private string _ref;
        private string _code;
        private string _message;
    
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set 
            {
                if (_ref != value)
                {
                    _ref = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code
        {
            get { return _code; }
            set 
            {
                if (_code != value)
                {
                    _code = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set 
            {
                if (_message != value)
                {
                    _message = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ErrorResponseWithErrorRef FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseWithErrorRef>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Request to place a bet</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PlaceParlayBetRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _uniqueRequestId;
        private bool? _acceptBetterLine;
        private double? _riskAmount;
        private OddsFormat? _oddsFormat;
        private System.Collections.ObjectModel.ObservableCollection<ParlayLegRequest> _legs;
        private System.Collections.ObjectModel.ObservableCollection<Anonymous> _roundRobinOptions;
    
        /// <summary>This unique id of the place bet requests. This is to support idempotent requests.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId
        {
            get { return _uniqueRequestId; }
            set 
            {
                if (_uniqueRequestId != value)
                {
                    _uniqueRequestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether or not to accept a bet when there is a line change in favor of the client.</summary>
        [Newtonsoft.Json.JsonProperty("acceptBetterLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcceptBetterLine
        {
            get { return _acceptBetterLine; }
            set 
            {
                if (_acceptBetterLine != value)
                {
                    _acceptBetterLine = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Amount in client’s currency. It is always risk amount when placing Parlay bets NOTE: If round robin options is used this amount will apply for all parlays so actual amount wagered will be riskAmount X number of Parlays.</summary>
        [Newtonsoft.Json.JsonProperty("riskAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RiskAmount
        {
            get { return _riskAmount; }
            set 
            {
                if (_riskAmount != value)
                {
                    _riskAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat? OddsFormat
        {
            get { return _oddsFormat; }
            set 
            {
                if (_oddsFormat != value)
                {
                    _oddsFormat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Collection of parlay legs.</summary>
        [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ParlayLegRequest> Legs
        {
            get { return _legs; }
            set 
            {
                if (_legs != value)
                {
                    _legs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("roundRobinOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous> RoundRobinOptions
        {
            get { return _roundRobinOptions; }
            set 
            {
                if (_roundRobinOptions != value)
                {
                    _roundRobinOptions = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PlaceParlayBetRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceParlayBetRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayLegRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _uniqueLegId;
        private long? _lineId;
        private long? _altLineId;
        private bool? _pitcher1MustStart;
        private bool? _pitcher2MustStart;
        private int? _sportId;
        private long? _eventId;
        private int? _periodNumber;
        private ParlayLegRequestLegBetType? _legBetType;
        private string _team;
        private ParlayLegRequestSide? _side;
    
        /// <summary>Unique id of the leg. It's used to identify and match legs in the response.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueLegId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueLegId
        {
            get { return _uniqueLegId; }
            set 
            {
                if (_uniqueLegId != value)
                {
                    _uniqueLegId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Line identification.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Alternate line identification.</summary>
        [Newtonsoft.Json.JsonProperty("altLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AltLineId
        {
            get { return _altLineId; }
            set 
            {
                if (_altLineId != value)
                {
                    _altLineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Baseball only. Refers to the pitcher for Team1.  This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher1MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher1MustStart
        {
            get { return _pitcher1MustStart; }
            set 
            {
                if (_pitcher1MustStart != value)
                {
                    _pitcher1MustStart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Baseball only. Refers to the pitcher for Team2. This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher2MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher2MustStart
        {
            get { return _pitcher2MustStart; }
            set 
            {
                if (_pitcher2MustStart != value)
                {
                    _pitcher2MustStart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Sport identification.</summary>
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Event identification.</summary>
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId
        {
            get { return _eventId; }
            set 
            {
                if (_eventId != value)
                {
                    _eventId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>This represents the period of the match. For example, for soccer we have: 0 -  Game, 1 - 1st Half and 2 - 2nd Half</summary>
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber
        {
            get { return _periodNumber; }
            set 
            {
                if (_periodNumber != value)
                {
                    _periodNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Only SPREAD, MONEYLINE and TOTAL_POINTS are supported.</summary>
        [Newtonsoft.Json.JsonProperty("legBetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegRequestLegBetType? LegBetType
        {
            get { return _legBetType; }
            set 
            {
                if (_legBetType != value)
                {
                    _legBetType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Chosen team type. This is needed only for SPREAD and MONEYLINE bet types.</summary>
        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team
        {
            get { return _team; }
            set 
            {
                if (_team != value)
                {
                    _team = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Chosen side type. This is needed only for TOTAL_POINTS bet type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegRequestSide? Side
        {
            get { return _side; }
            set 
            {
                if (_side != value)
                {
                    _side = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayLegRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayLegRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PlaceParlayBetResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private PlaceParlayBetResponseStatus? _status;
        private PlaceParlayBetResponseErrorCode? _errorCode;
        private long? _betId;
        private System.Guid? _uniqueRequestId;
        private System.Collections.ObjectModel.ObservableCollection<RoundRobinOptionWithOdds> _roundRobinOptionWithOdds;
        private double? _maxRiskStake;
        private double? _minRiskStake;
        private System.Collections.ObjectModel.ObservableCollection<ParlayLegResponse> _validLegs;
        private System.Collections.ObjectModel.ObservableCollection<ParlayLegResponse> _invalidLegs;
    
        /// <summary>Status of the response.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceParlayBetResponseStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.
        /// 
        /// 
        /// ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,  
        /// ALL_BETTING_CLOSED = Betting is not allowed at this moment,  
        /// BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,  
        /// BLOCKED_BETTING = Betting is suspended for the client,   
        /// BLOCKED_CLIENT = Client is no longer active,  
        /// INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,  
        /// INVALID_COUNTRY = Client country is not allowed for betting,  
        /// INVALID_LEGS = One or more legs are invalid,  
        /// INVALID_ODDS_FORMAT = If a bet was submitted with the odds format that is not allowed for the client,  
        /// INVALID_ROUND_ROBIN_OPTIONS = Round robin options are invalid (i.e. does not match with number of legs),  
        /// ROUND_ROBIN_DISALLOWED = Round robin is disallowed for one of the leagues,  
        /// TOO_MANY_LEGS = Maximum of 10 legs can be specified,  
        /// TOO_FEW_LEGS = At least 2 legs are required for Parlay,  
        /// RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Client has reached his total loss limit,  
        /// RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Client has reached his total risk limit,  
        /// INVALID_REQUEST = Request has invalid parameters,  
        /// DUPLICATE_UNIQUE_REQUEST_ID = Request with the same uniqueRequestId was already processed. Please set the new value if you still want the request to be processed,  
        /// SYSTEM_ERROR_3 = Unexpected error 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceParlayBetResponseErrorCode? ErrorCode
        {
            get { return _errorCode; }
            set 
            {
                if (_errorCode != value)
                {
                    _errorCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of a newly created bet.</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BetId
        {
            get { return _betId; }
            set 
            {
                if (_betId != value)
                {
                    _betId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique identifier provided in the request.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId
        {
            get { return _uniqueRequestId; }
            set 
            {
                if (_uniqueRequestId != value)
                {
                    _uniqueRequestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Provides array with all acceptable Round Robin options with parlay odds for that option.</summary>
        [Newtonsoft.Json.JsonProperty("roundRobinOptionWithOdds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<RoundRobinOptionWithOdds> RoundRobinOptionWithOdds
        {
            get { return _roundRobinOptionWithOdds; }
            set 
            {
                if (_roundRobinOptionWithOdds != value)
                {
                    _roundRobinOptionWithOdds = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Maximum stake amount</summary>
        [Newtonsoft.Json.JsonProperty("maxRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxRiskStake
        {
            get { return _maxRiskStake; }
            set 
            {
                if (_maxRiskStake != value)
                {
                    _maxRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Minimum stake amount</summary>
        [Newtonsoft.Json.JsonProperty("minRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinRiskStake
        {
            get { return _minRiskStake; }
            set 
            {
                if (_minRiskStake != value)
                {
                    _minRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Collection of valid legs (format described below). Can be empty if no valid legs found.</summary>
        [Newtonsoft.Json.JsonProperty("validLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ParlayLegResponse> ValidLegs
        {
            get { return _validLegs; }
            set 
            {
                if (_validLegs != value)
                {
                    _validLegs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>The collection of legs that resulted in error (format described below). Can be empty if no invalid legs found.</summary>
        [Newtonsoft.Json.JsonProperty("invalidLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ParlayLegResponse> InvalidLegs
        {
            get { return _invalidLegs; }
            set 
            {
                if (_invalidLegs != value)
                {
                    _invalidLegs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PlaceParlayBetResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceParlayBetResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RoundRobinOptionWithOdds : System.ComponentModel.INotifyPropertyChanged
    {
        private RoundRobinOptionWithOddsRoundRobinOption? _roundRobinOption;
        private double? _odds;
        private double? _unroundedDecimalOdds;
    
        [Newtonsoft.Json.JsonProperty("roundRobinOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RoundRobinOptionWithOddsRoundRobinOption? RoundRobinOption
        {
            get { return _roundRobinOption; }
            set 
            {
                if (_roundRobinOption != value)
                {
                    _roundRobinOption = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Parlay odds for this option.</summary>
        [Newtonsoft.Json.JsonProperty("odds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Odds
        {
            get { return _odds; }
            set 
            {
                if (_odds != value)
                {
                    _odds = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unrounded parlay odds in decimal format to be used for calculations only</summary>
        [Newtonsoft.Json.JsonProperty("unroundedDecimalOdds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnroundedDecimalOdds
        {
            get { return _unroundedDecimalOdds; }
            set 
            {
                if (_unroundedDecimalOdds != value)
                {
                    _unroundedDecimalOdds = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static RoundRobinOptionWithOdds FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RoundRobinOptionWithOdds>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayLegResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private ParlayLegResponseStatus? _status;
        private ParlayLegResponseErrorCode? _errorCode;
        private System.Guid? _legId;
        private long? _lineId;
        private long? _altLineId;
        private double? _price;
        private System.Collections.ObjectModel.ObservableCollection<System.Guid> _correlatedLegs;
    
        /// <summary>Status of the request.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegResponseStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.
        /// 
        /// CANNOT_PARLAY_LIVE_GAME = The wager is placed on Live game,  
        /// CORRELATED = The leg is correlated with another one,  
        /// EVENT_NO_LONGER_AVAILABLE_FOR_BETTING = The event is no longer offered,  
        /// EVENT_NOT_OFFERED_FOR_PARLAY = The event is not offered for parlaying,  
        /// INVALID_EVENT = Live betting is not allowed at this moment,  
        /// INVALID_LEG_BET_TYPE = Leg bet type is not accepted for parlaying. Accepted values are SPREAD, MONEYLINE, TOTAL_POINTS,  
        /// INVALID_PARLAY_BET = The leg did not validated due to error on Parlay Bet. Check the error PlaceParlayBet response for error details,  
        /// LINE_CHANGED = Bet is submitted on a line that has changed,  
        /// LINE_DOES_NOT_BELONG_TO_EVENT = LineId does not match the EventId specified in the request,  
        /// LISTED_PITCHERS_SELECTION_ERROR = If bet was submitted with pitcher1MustStart and/or pitcher2MustStart parameters with values that are not allowed,  
        /// ODDS_NO_LONGER_OFFERED_FOR_PARLAY_1 = Due to line change odds are not offered for parlaying,   
        /// ODDS_NO_LONGER_OFFERED_FOR_PARLAY_2 = Due to line change odds are not offered for parlaying,   
        /// ODDS_NO_LONGER_OFFERED_FOR_PARLAY_3 = Due to line change odds are not offered for parlaying,   
        /// OFFLINE_EVENT = Bet is submitted on an event that is offline or with incorrect lineId,  
        /// PAST_CUTOFFTIME = Bet is submitted on a game after the betting cutoff time,   
        /// SYSTEM_ERROR_1 = Unexpected error,  
        /// SYSTEM_ERROR_2 = Unexpected error,  
        /// SYSTEM_ERROR_3 = Unexpected error,  
        /// LINE_IS_NOT_AVAILABLE = Line is not available for the specified Parlay Leg.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegResponseErrorCode? ErrorCode
        {
            get { return _errorCode; }
            set 
            {
                if (_errorCode != value)
                {
                    _errorCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Echo of the legId from the request.</summary>
        [Newtonsoft.Json.JsonProperty("legId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? LegId
        {
            get { return _legId; }
            set 
            {
                if (_legId != value)
                {
                    _legId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Line identification that bet was placed on.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If bet was accpepted on alternate line, the altLineId will be returned.</summary>
        [Newtonsoft.Json.JsonProperty("altLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AltLineId
        {
            get { return _altLineId; }
            set 
            {
                if (_altLineId != value)
                {
                    _altLineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Price that the bet was placed on.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>If errorCode is CORRELATED will contain legIds of all correlated legs.</summary>
        [Newtonsoft.Json.JsonProperty("correlatedLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<System.Guid> CorrelatedLegs
        {
            get { return _correlatedLegs; }
            set 
            {
                if (_correlatedLegs != value)
                {
                    _correlatedLegs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayLegResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayLegResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayBet : System.ComponentModel.INotifyPropertyChanged
    {
        private long _betId;
        private System.Guid? _uniqueRequestId;
        private int _wagerNumber;
        private System.DateTime _placedAt;
        private ParlayBetBetStatus _betStatus;
        private string _betType = "PARLAY";
        private decimal _win;
        private decimal _risk;
        private decimal? _winLoss;
        private OddsFormat _oddsFormat;
        private decimal? _odds;
        private decimal? _customerCommission;
        private CancellationReason _cancellationReason;
        private long _updateSequence;
        private System.Collections.ObjectModel.ObservableCollection<ParlayLeg> _legs = new System.Collections.ObjectModel.ObservableCollection<ParlayLeg>();
        private decimal? _price;
        private decimal? _finalPrice;
    
        /// <summary>Bet identification</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Always)]
        public long BetId
        {
            get { return _betId; }
            set 
            {
                if (_betId != value)
                {
                    _betId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique Request Id</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId
        {
            get { return _uniqueRequestId; }
            set 
            {
                if (_uniqueRequestId != value)
                {
                    _uniqueRequestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("wagerNumber", Required = Newtonsoft.Json.Required.Always)]
        public int WagerNumber
        {
            get { return _wagerNumber; }
            set 
            {
                if (_wagerNumber != value)
                {
                    _wagerNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Date time when the bet was placed.</summary>
        [Newtonsoft.Json.JsonProperty("placedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime PlacedAt
        {
            get { return _placedAt; }
            set 
            {
                if (_placedAt != value)
                {
                    _placedAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Bet Status. 
        /// 
        /// ACCEPTED = Bet was accepted,  
        /// CANCELLED = Bet is cancelled as per Pinnacle betting rules,  
        /// LOSE = The bet is settled as lose,  
        /// PENDING_ACCEPTANCE = This status is reserved only for live bets. If a live bet is placed during danger zone or live delay is applied, it will be in PENDING_ACCEPTANCE , otherwise in ACCEPTED status. From this status bet can go to ACCEPTED or REJECTED status,  
        /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status,  
        /// NOT_ACCEPTED = Bet was not accepted. Bet can be in this status only if it was previously in PENDING_ACCEPTANCE status,  
        /// WON = The bet is settled as won
        /// </summary>
        [Newtonsoft.Json.JsonProperty("betStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayBetBetStatus BetStatus
        {
            get { return _betStatus; }
            set 
            {
                if (_betStatus != value)
                {
                    _betStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BetType
        {
            get { return _betType; }
            set 
            {
                if (_betType != value)
                {
                    _betType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Win amount.</summary>
        [Newtonsoft.Json.JsonProperty("win", Required = Newtonsoft.Json.Required.Always)]
        public decimal Win
        {
            get { return _win; }
            set 
            {
                if (_win != value)
                {
                    _win = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("risk", Required = Newtonsoft.Json.Required.Always)]
        public decimal Risk
        {
            get { return _risk; }
            set 
            {
                if (_risk != value)
                {
                    _risk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Win-Loss for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("winLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? WinLoss
        {
            get { return _winLoss; }
            set 
            {
                if (_winLoss != value)
                {
                    _winLoss = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat OddsFormat
        {
            get { return _oddsFormat; }
            set 
            {
                if (_oddsFormat != value)
                {
                    _oddsFormat = value; 
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("odds", Required = Newtonsoft.Json.Required.AllowNull)]
        [System.ComponentModel.DataAnnotations.Required]
        public decimal? Odds
        {
            get { return _odds; }
            set 
            {
                if (_odds != value)
                {
                    _odds = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Client’s commission on the bet.</summary>
        [Newtonsoft.Json.JsonProperty("customerCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CustomerCommission
        {
            get { return _customerCommission; }
            set 
            {
                if (_customerCommission != value)
                {
                    _customerCommission = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReason CancellationReason
        {
            get { return _cancellationReason; }
            set 
            {
                if (_cancellationReason != value)
                {
                    _cancellationReason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Update Sequence</summary>
        [Newtonsoft.Json.JsonProperty("updateSequence", Required = Newtonsoft.Json.Required.Default)]
        public long UpdateSequence
        {
            get { return _updateSequence; }
            set 
            {
                if (_updateSequence != value)
                {
                    _updateSequence = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<ParlayLeg> Legs
        {
            get { return _legs; }
            set 
            {
                if (_legs != value)
                {
                    _legs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Only for settled parlay. Final price may differ in case leg was cancelled or half won</summary>
        [Newtonsoft.Json.JsonProperty("finalPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FinalPrice
        {
            get { return _finalPrice; }
            set 
            {
                if (_finalPrice != value)
                {
                    _finalPrice = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayBet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayBet>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ParlayLeg : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _sportId;
        private ParlayLegLegBetType? _legBetType;
        private ParlayLegLegBetStatus? _legBetStatus;
        private int? _leagueId;
        private long? _eventId;
        private System.DateTime? _eventStartTime;
        private decimal? _handicap;
        private decimal? _price;
        private string _teamName;
        private ParlayLegSide? _side;
        private string _pitcher1;
        private string _pitcher2;
        private bool? _pitcher1MustStart;
        private bool? _pitcher2MustStart;
        private string _team1;
        private string _team2;
        private int? _periodNumber;
        private decimal? _ftTeam1Score;
        private decimal? _ftTeam2Score;
        private decimal? _pTeam1Score;
        private decimal? _pTeam2Score;
        private CancellationReason _cancellationReason;
    
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Parlay leg type.</summary>
        [Newtonsoft.Json.JsonProperty("legBetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegLegBetType? LegBetType
        {
            get { return _legBetType; }
            set 
            {
                if (_legBetType != value)
                {
                    _legBetType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Parlay Leg status.
        /// CANCELLED = The leg is canceled- the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,  
        /// LOSE = The leg is a loss or a push-lose. When Push-lose happens, the half of the stake on the leg will be pushed to the next leg, and the other half will be a lose. This can happen only when the leg is placed on a quarter points handicap,  
        /// PUSH = The leg is a push - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,  
        /// REFUNDED = The leg is refunded - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,  
        /// WON = The leg is a won or a push-won. When Push-won happens, the half of the stake on the leg will be pushed to the next leg, and the other half is won. This can happen only when the leg is placed on a quarter points handicap 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legBetStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegLegBetStatus? LegBetStatus
        {
            get { return _legBetStatus; }
            set 
            {
                if (_legBetStatus != value)
                {
                    _legBetStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("leagueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeagueId
        {
            get { return _leagueId; }
            set 
            {
                if (_leagueId != value)
                {
                    _leagueId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId
        {
            get { return _eventId; }
            set 
            {
                if (_eventId != value)
                {
                    _eventId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eventStartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EventStartTime
        {
            get { return _eventStartTime; }
            set 
            {
                if (_eventStartTime != value)
                {
                    _eventStartTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Handicap
        {
            get { return _handicap; }
            set 
            {
                if (_handicap != value)
                {
                    _handicap = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeamName
        {
            get { return _teamName; }
            set 
            {
                if (_teamName != value)
                {
                    _teamName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Side type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegSide? Side
        {
            get { return _side; }
            set 
            {
                if (_side != value)
                {
                    _side = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pitcher1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pitcher1
        {
            get { return _pitcher1; }
            set 
            {
                if (_pitcher1 != value)
                {
                    _pitcher1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pitcher2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pitcher2
        {
            get { return _pitcher2; }
            set 
            {
                if (_pitcher2 != value)
                {
                    _pitcher2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pitcher1MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher1MustStart
        {
            get { return _pitcher1MustStart; }
            set 
            {
                if (_pitcher1MustStart != value)
                {
                    _pitcher1MustStart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("pitcher2MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher2MustStart
        {
            get { return _pitcher2MustStart; }
            set 
            {
                if (_pitcher2MustStart != value)
                {
                    _pitcher2MustStart = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Wellington Phoenix</summary>
        [Newtonsoft.Json.JsonProperty("team1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team1
        {
            get { return _team1; }
            set 
            {
                if (_team1 != value)
                {
                    _team1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Adelaide United</summary>
        [Newtonsoft.Json.JsonProperty("team2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team2
        {
            get { return _team2; }
            set 
            {
                if (_team2 != value)
                {
                    _team2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber
        {
            get { return _periodNumber; }
            set 
            {
                if (_periodNumber != value)
                {
                    _periodNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Full time team 1 score</summary>
        [Newtonsoft.Json.JsonProperty("ftTeam1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FtTeam1Score
        {
            get { return _ftTeam1Score; }
            set 
            {
                if (_ftTeam1Score != value)
                {
                    _ftTeam1Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Full time team 2 score</summary>
        [Newtonsoft.Json.JsonProperty("ftTeam2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? FtTeam2Score
        {
            get { return _ftTeam2Score; }
            set 
            {
                if (_ftTeam2Score != value)
                {
                    _ftTeam2Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>End of period team 1 score. If the bet was placed on Game period (periodNumber =0) , this will be null</summary>
        [Newtonsoft.Json.JsonProperty("pTeam1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? PTeam1Score
        {
            get { return _pTeam1Score; }
            set 
            {
                if (_pTeam1Score != value)
                {
                    _pTeam1Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>End of period team 2 score. If the bet was placed on Game period (periodNumber =0) , this will be null</summary>
        [Newtonsoft.Json.JsonProperty("pTeam2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? PTeam2Score
        {
            get { return _pTeam2Score; }
            set 
            {
                if (_pTeam2Score != value)
                {
                    _pTeam2Score = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReason CancellationReason
        {
            get { return _cancellationReason; }
            set 
            {
                if (_cancellationReason != value)
                {
                    _cancellationReason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ParlayLeg FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParlayLeg>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PlaceTeaserBetRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _uniqueRequestId;
        private int? _teaserId;
        private OddsFormat? _oddsFormat;
        private string _winRiskStake;
        private double? _stake;
        private System.Collections.ObjectModel.ObservableCollection<TeaserBetLeg> _legs;
    
        /// <summary>Client generated GUID for uniquely identifying the bet.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId
        {
            get { return _uniqueRequestId; }
            set 
            {
                if (_uniqueRequestId != value)
                {
                    _uniqueRequestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique identifier. Teaser details can be retrieved from a call to Get Teaser Groups endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("teaserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeaserId
        {
            get { return _teaserId; }
            set 
            {
                if (_teaserId != value)
                {
                    _teaserId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat? OddsFormat
        {
            get { return _oddsFormat; }
            set 
            {
                if (_oddsFormat != value)
                {
                    _oddsFormat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the stake amount is risk or win amount.</summary>
        [Newtonsoft.Json.JsonProperty("winRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WinRiskStake
        {
            get { return _winRiskStake; }
            set 
            {
                if (_winRiskStake != value)
                {
                    _winRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>amount in client’s currency.</summary>
        [Newtonsoft.Json.JsonProperty("stake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Stake
        {
            get { return _stake; }
            set 
            {
                if (_stake != value)
                {
                    _stake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Collection of legs.</summary>
        [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TeaserBetLeg> Legs
        {
            get { return _legs; }
            set 
            {
                if (_legs != value)
                {
                    _legs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PlaceTeaserBetRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceTeaserBetRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserBetLeg : System.ComponentModel.INotifyPropertyChanged
    {
        private string _legId;
        private TeaserBetLegBetType? _betType;
        private long? _lineId;
        private long? _eventId;
        private string _team;
        private TeaserBetLegSide? _side;
    
        /// <summary>Client generated GUID for uniquely identifying the leg.</summary>
        [Newtonsoft.Json.JsonProperty("legId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegId
        {
            get { return _legId; }
            set 
            {
                if (_legId != value)
                {
                    _legId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Leg bet type can be SPREAD or TOTAL_POINTS </summary>
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserBetLegBetType? BetType
        {
            get { return _betType; }
            set 
            {
                if (_betType != value)
                {
                    _betType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId
        {
            get { return _eventId; }
            set 
            {
                if (_eventId != value)
                {
                    _eventId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Team being bet on for a spread line.</summary>
        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team
        {
            get { return _team; }
            set 
            {
                if (_team != value)
                {
                    _team = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Chosen side type. This is needed only for TOTAL_POINTS bet type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserBetLegSide? Side
        {
            get { return _side; }
            set 
            {
                if (_side != value)
                {
                    _side = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserBetLeg FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserBetLeg>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PlaceTeaserBetResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private string _status;
        private PlaceTeaserBetResponseErrorCode? _errorCode;
        private long? _betId;
        private System.Guid? _uniqueRequestId;
        private double? _price;
        private double? _riskAmount;
        private double? _winAmount;
        private string _winRiskStake;
        private System.Collections.ObjectModel.ObservableCollection<PlaceTeaserBetLegResponse> _invalidLegs;
        private System.Collections.ObjectModel.ObservableCollection<PlaceTeaserBetLegResponse> _validLegs;
    
        /// <summary>Status of the request.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.
        /// 
        /// ABOVE_MAX_BET_AMOUNT = Bet is above the maximum allowed,  
        /// ALL_BETTING_CLOSED = The wagering is disabled in the system (not related to a customer),  
        /// BELOW_MIN_BET_AMOUNT = Bet is below the minimum allowed,  
        /// BLOCKED_BETTING = Betting is suspended for the client,  
        /// BLOCKED_CLIENT = Customer is inactive in the system,  
        /// DOUBLE_HIT = The website submitted the same bet more than once,  
        /// DUPLICATE_CLIENT_REFERENCE_ID = The teaser unique id and/or one of the leg unique id are the same,  
        /// INCOMPLETE_CUSTOMER_BETTING_PROFILE = The customer does not exist,  
        /// INSUFFICIENT_FUNDS = The risk amount is above the customer’s available balance,  
        /// INVALID_COUNTRY = Current location is proscribed,  
        /// INVALID_CUSTOMER_PROFILE = Either the customer does not exist OR the customer business rules are not verified,  
        /// INVALID_LEGS = One or more legs are not verified,  
        /// INVALID_REQUEST = Teaser request is not valid,  
        /// ODDS_FORMAT_MISMATCH = Agent customer’s odds format differs from wager request odds format,  
        /// RESUBMIT_REQUEST = The ticket hast to be resubmitted,  
        /// TEASER_DOES_NOT_EXIST = Teaser does not exist in the system,  
        /// SAME_EVENT_ONLY_REQUIRED = Legs required to be for the same game only. Specified in the Teaser Specifications,  
        /// SYSTEM_ERROR_1 = System error,  
        /// SYSTEM_ERROR_2 = System error,  
        /// SYSTEM_ERROR_3 = System error,  
        /// TOO_FEW_LEGS = Legs count is below Min Picks specified in the Teaser Specifications,  
        /// TOO_MANY_LEGS = Legs count is above Max Picks specified in the Teaser Specifications,
        /// DUPLICATE_UNIQUE_REQUEST_ID = Request with the same uniqueRequestId was already processed. Please set the new value if you still want the request to be processed,  
        /// RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Client has reached his total loss limit,  
        /// RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Client has reached his total risk limit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceTeaserBetResponseErrorCode? ErrorCode
        {
            get { return _errorCode; }
            set 
            {
                if (_errorCode != value)
                {
                    _errorCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of a newly created bet.</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BetId
        {
            get { return _betId; }
            set 
            {
                if (_betId != value)
                {
                    _betId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique identifier provided in the request.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId
        {
            get { return _uniqueRequestId; }
            set 
            {
                if (_uniqueRequestId != value)
                {
                    _uniqueRequestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Price for the bet.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Amount wagered.</summary>
        [Newtonsoft.Json.JsonProperty("riskAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RiskAmount
        {
            get { return _riskAmount; }
            set 
            {
                if (_riskAmount != value)
                {
                    _riskAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Potential winnings.</summary>
        [Newtonsoft.Json.JsonProperty("winAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WinAmount
        {
            get { return _winAmount; }
            set 
            {
                if (_winAmount != value)
                {
                    _winAmount = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the stake amount is risk or win amount.</summary>
        [Newtonsoft.Json.JsonProperty("winRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WinRiskStake
        {
            get { return _winRiskStake; }
            set 
            {
                if (_winRiskStake != value)
                {
                    _winRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of invalid legs, if any.</summary>
        [Newtonsoft.Json.JsonProperty("invalidLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PlaceTeaserBetLegResponse> InvalidLegs
        {
            get { return _invalidLegs; }
            set 
            {
                if (_invalidLegs != value)
                {
                    _invalidLegs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of valid legs, if any.</summary>
        [Newtonsoft.Json.JsonProperty("validLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<PlaceTeaserBetLegResponse> ValidLegs
        {
            get { return _validLegs; }
            set 
            {
                if (_validLegs != value)
                {
                    _validLegs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PlaceTeaserBetResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceTeaserBetResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class PlaceTeaserBetLegResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private string _status;
        private PlaceTeaserBetLegResponseErrorCode? _errorCode;
        private System.Guid? _legId;
        private long? _lineId;
        private double? _points;
    
        /// <summary>Status of the request.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.
        /// 
        /// CANNOT_TEASER_LIVE_GAME = Teaser is not allowed on a live game,   
        /// CHECK_TEASER_ERROR = The teaser is invalid, check the teaser error for more details,  
        /// INVALID_EVENT = The game is not found in the system,  
        /// INVALID_LEG_BET = The wager is not verified,  
        /// INVALID_LEG_BET_TYPE = Wager type is not “teasable”, can be either Spread or Total,  
        /// LINE_CHANGED = Wager is placed on a line that has changed,  
        /// LINE_DOES_NOT_BELONG_TO_EVENT = There was no game found for the wager,  
        /// OFFLINE_EVENT = Either the game is offline OR there was no game found for the wager,  
        /// PAST_CUTOFFTIME = Wager is placed on a game after the cutoff time,  
        /// POINTS_ARE_NOT_ADJUSTED = The teaser points were not adjusted,  
        /// SYSTEM_ERROR_1 = System error,  
        /// SYSTEM_ERROR_2 = System error,  
        /// WAGER_DATA_MISSING = Wager is denied due to insufficient information available for validation,  
        /// LINE_IS_NOT_AVAILABLE = Line is not available for the specified Teaser Leg.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceTeaserBetLegResponseErrorCode? ErrorCode
        {
            get { return _errorCode; }
            set 
            {
                if (_errorCode != value)
                {
                    _errorCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Echo of the legId from the request.</summary>
        [Newtonsoft.Json.JsonProperty("legId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? LegId
        {
            get { return _legId; }
            set 
            {
                if (_legId != value)
                {
                    _legId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Line identification that bet was placed on.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Number of points.</summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Points
        {
            get { return _points; }
            set 
            {
                if (_points != value)
                {
                    _points = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PlaceTeaserBetLegResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PlaceTeaserBetLegResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MultiBetRequestOfSpecialBetRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<SpecialBetRequest> _bets;
    
        /// <summary>The individual bets.</summary>
        [Newtonsoft.Json.JsonProperty("bets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SpecialBetRequest> Bets
        {
            get { return _bets; }
            set 
            {
                if (_bets != value)
                {
                    _bets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MultiBetRequestOfSpecialBetRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MultiBetRequestOfSpecialBetRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialBetRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _uniqueRequestId;
        private bool? _acceptBetterLine;
        private OddsFormat? _oddsFormat;
        private double? _stake;
        private SpecialBetRequestWinRiskStake? _winRiskStake;
        private long? _lineId;
        private long? _specialId;
        private long? _contestantId;
    
        /// <summary>This unique id of the place bet requests. This is to support idempotent requests.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId
        {
            get { return _uniqueRequestId; }
            set 
            {
                if (_uniqueRequestId != value)
                {
                    _uniqueRequestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether or not to accept a bet when there is a line change in favor of the client.</summary>
        [Newtonsoft.Json.JsonProperty("acceptBetterLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcceptBetterLine
        {
            get { return _acceptBetterLine; }
            set 
            {
                if (_acceptBetterLine != value)
                {
                    _acceptBetterLine = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat? OddsFormat
        {
            get { return _oddsFormat; }
            set 
            {
                if (_oddsFormat != value)
                {
                    _oddsFormat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>amount in client’s currency.</summary>
        [Newtonsoft.Json.JsonProperty("stake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Stake
        {
            get { return _stake; }
            set 
            {
                if (_stake != value)
                {
                    _stake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether the stake amount is risk or win amount.</summary>
        [Newtonsoft.Json.JsonProperty("winRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpecialBetRequestWinRiskStake? WinRiskStake
        {
            get { return _winRiskStake; }
            set 
            {
                if (_winRiskStake != value)
                {
                    _winRiskStake = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Line identification.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId
        {
            get { return _lineId; }
            set 
            {
                if (_lineId != value)
                {
                    _lineId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Special identification.</summary>
        [Newtonsoft.Json.JsonProperty("specialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SpecialId
        {
            get { return _specialId; }
            set 
            {
                if (_specialId != value)
                {
                    _specialId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Contestant identification.</summary>
        [Newtonsoft.Json.JsonProperty("contestantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ContestantId
        {
            get { return _contestantId; }
            set 
            {
                if (_contestantId != value)
                {
                    _contestantId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SpecialBetRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialBetRequest>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MultiBetResponseOfSpecialBetResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<SpecialBetResponse> _bets;
    
        /// <summary>The individual bets.</summary>
        [Newtonsoft.Json.JsonProperty("bets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SpecialBetResponse> Bets
        {
            get { return _bets; }
            set 
            {
                if (_bets != value)
                {
                    _bets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static MultiBetResponseOfSpecialBetResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MultiBetResponseOfSpecialBetResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialBetResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private SpecialBetResponseStatus? _status;
        private SpecialBetResponseErrorCode? _errorCode;
        private long? _betId;
        private System.Guid? _uniqueRequestId;
        private bool? _betterLineWasAccepted;
    
        /// <summary>Status of the request.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpecialBetResponseStatus? Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.
        /// 
        /// ALL_BETTING_CLOSED = Betting is not allowed at this moment. This may happen during system maintenance.  
        ///  ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,  
        ///  BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,  
        ///  BLOCKED_BETTING = Betting is suspened for the client,  
        ///  BLOCKED_CLIENT = Client is no longer active,  
        ///  CONTEST_NOT_FOUND = Incorrect contest id provided or contest is no longer available,  
        ///  DUPLICATE_UNIQUE_REQUEST_ID = UniqueRequestId must be inque for each bet,  
        ///  INCOMPLETE_CUSTOMER_BETTING_PROFILE = Customer profile could not be loaded,   
        ///  INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,  
        ///  INVALID_COUNTRY = Client country is not allowed for betting,  
        ///  INVALID_REQUEST = Special bet request is not valid,  
        ///  LINE_CHANGED = Bet is submitted on a line that has changed,  
        ///  PAST_CUTOFFTIME = Bet is submitted on a game after the betting cutoff time,  
        ///  RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Self-imposed loss limit exceeded,  
        ///  RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Self-imposed risk limit exceeded,  
        ///  RESUBMIT_REQUEST = The ticket hast to be resubmitted,  
        ///  SYSTEM_ERROR_1 = Unexpected error,  
        ///  SYSTEM_ERROR_2 = Unexpected error,  
        ///  UNIQUE_REQUEST_ID_REQUIRED = UniqueRequestId is missing,  
        ///  INVALID_CUSTOMER_PROFILE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpecialBetResponseErrorCode? ErrorCode
        {
            get { return _errorCode; }
            set 
            {
                if (_errorCode != value)
                {
                    _errorCode = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Id of a newly created bet.</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BetId
        {
            get { return _betId; }
            set 
            {
                if (_betId != value)
                {
                    _betId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique identifier provided in the request.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId
        {
            get { return _uniqueRequestId; }
            set 
            {
                if (_uniqueRequestId != value)
                {
                    _uniqueRequestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Whether or not the bet was accepted on the line that changed in favour of client. This can be true only if acceptBetterLine in the Place Bet request is set to TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("betterLineWasAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BetterLineWasAccepted
        {
            get { return _betterLineWasAccepted; }
            set 
            {
                if (_betterLineWasAccepted != value)
                {
                    _betterLineWasAccepted = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SpecialBetResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialBetResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SpecialBet : System.ComponentModel.INotifyPropertyChanged
    {
        private long _betId;
        private System.Guid? _uniqueRequestId;
        private int _wagerNumber;
        private System.DateTime _placedAt;
        private SpecialBetBetStatus _betStatus;
        private string _betType = "SPECIAL";
        private decimal _win;
        private decimal _risk;
        private decimal? _winLoss;
        private OddsFormat _oddsFormat;
        private decimal? _customerCommission;
        private CancellationReason _cancellationReason;
        private long _updateSequence;
        private long _specialId;
        private string _specialName;
        private long _contestantId;
        private string _contestantName;
        private decimal _price;
        private decimal? _handicap;
        private string _units;
        private int _sportId;
        private int _leagueId;
        private long? _eventId;
        private int? _periodNumber;
        private string _team1;
        private string _team2;
    
        /// <summary>Bet identification</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Always)]
        public long BetId
        {
            get { return _betId; }
            set 
            {
                if (_betId != value)
                {
                    _betId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique Request Id</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId
        {
            get { return _uniqueRequestId; }
            set 
            {
                if (_uniqueRequestId != value)
                {
                    _uniqueRequestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("wagerNumber", Required = Newtonsoft.Json.Required.Always)]
        public int WagerNumber
        {
            get { return _wagerNumber; }
            set 
            {
                if (_wagerNumber != value)
                {
                    _wagerNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Date time when the bet was placed.</summary>
        [Newtonsoft.Json.JsonProperty("placedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime PlacedAt
        {
            get { return _placedAt; }
            set 
            {
                if (_placedAt != value)
                {
                    _placedAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Bet Status. 
        /// ACCEPTED = Bet was accepted, 
        /// CANCELLED = Bet is cancelled as per Pinnacle betting rules, 
        /// LOSE = The bet is settled as lose,
        /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status, 
        /// WON = The bet is settled as won 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("betStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpecialBetBetStatus BetStatus
        {
            get { return _betStatus; }
            set 
            {
                if (_betStatus != value)
                {
                    _betStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BetType
        {
            get { return _betType; }
            set 
            {
                if (_betType != value)
                {
                    _betType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Win amount.</summary>
        [Newtonsoft.Json.JsonProperty("win", Required = Newtonsoft.Json.Required.Always)]
        public decimal Win
        {
            get { return _win; }
            set 
            {
                if (_win != value)
                {
                    _win = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("risk", Required = Newtonsoft.Json.Required.Always)]
        public decimal Risk
        {
            get { return _risk; }
            set 
            {
                if (_risk != value)
                {
                    _risk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Win-Loss for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("winLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? WinLoss
        {
            get { return _winLoss; }
            set 
            {
                if (_winLoss != value)
                {
                    _winLoss = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat OddsFormat
        {
            get { return _oddsFormat; }
            set 
            {
                if (_oddsFormat != value)
                {
                    _oddsFormat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Client’s commission on the bet.</summary>
        [Newtonsoft.Json.JsonProperty("customerCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CustomerCommission
        {
            get { return _customerCommission; }
            set 
            {
                if (_customerCommission != value)
                {
                    _customerCommission = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReason CancellationReason
        {
            get { return _cancellationReason; }
            set 
            {
                if (_cancellationReason != value)
                {
                    _cancellationReason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Update Sequence. It gets updated when the bet status change.</summary>
        [Newtonsoft.Json.JsonProperty("updateSequence", Required = Newtonsoft.Json.Required.Default)]
        public long UpdateSequence
        {
            get { return _updateSequence; }
            set 
            {
                if (_updateSequence != value)
                {
                    _updateSequence = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("specialId", Required = Newtonsoft.Json.Required.Default)]
        public long SpecialId
        {
            get { return _specialId; }
            set 
            {
                if (_specialId != value)
                {
                    _specialId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("specialName", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string SpecialName
        {
            get { return _specialName; }
            set 
            {
                if (_specialName != value)
                {
                    _specialName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contestantId", Required = Newtonsoft.Json.Required.Default)]
        public long ContestantId
        {
            get { return _contestantId; }
            set 
            {
                if (_contestantId != value)
                {
                    _contestantId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("contestantName", Required = Newtonsoft.Json.Required.Default)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContestantName
        {
            get { return _contestantName; }
            set 
            {
                if (_contestantName != value)
                {
                    _contestantName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public decimal Price
        {
            get { return _price; }
            set 
            {
                if (_price != value)
                {
                    _price = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Handicap
        {
            get { return _handicap; }
            set 
            {
                if (_handicap != value)
                {
                    _handicap = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units
        {
            get { return _units; }
            set 
            {
                if (_units != value)
                {
                    _units = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Always)]
        public int SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("leagueId", Required = Newtonsoft.Json.Required.Always)]
        public int LeagueId
        {
            get { return _leagueId; }
            set 
            {
                if (_leagueId != value)
                {
                    _leagueId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Populated if bet was placed on a special linked to the event.</summary>
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId
        {
            get { return _eventId; }
            set 
            {
                if (_eventId != value)
                {
                    _eventId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Populated if bet was placed on a special linked to the event.</summary>
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber
        {
            get { return _periodNumber; }
            set 
            {
                if (_periodNumber != value)
                {
                    _periodNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Populated if bet was placed on a special linked to the event.</summary>
        [Newtonsoft.Json.JsonProperty("team1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team1
        {
            get { return _team1; }
            set 
            {
                if (_team1 != value)
                {
                    _team1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Populated if bet was placed on a special linked to the event.</summary>
        [Newtonsoft.Json.JsonProperty("team2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team2
        {
            get { return _team2; }
            set 
            {
                if (_team2 != value)
                {
                    _team2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SpecialBet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SpecialBet>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GetBetsByTypeResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.ObjectModel.ObservableCollection<StraightBet> _straightBets;
        private System.Collections.ObjectModel.ObservableCollection<ParlayBet> _parlayBets;
        private System.Collections.ObjectModel.ObservableCollection<TeaserBet> _teaserBets;
        private System.Collections.ObjectModel.ObservableCollection<SpecialBet> _specialBets;
        private System.Collections.ObjectModel.ObservableCollection<ManualBet> _manualBets;
    
        /// <summary>A collection of placed straight bets.</summary>
        [Newtonsoft.Json.JsonProperty("straightBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<StraightBet> StraightBets
        {
            get { return _straightBets; }
            set 
            {
                if (_straightBets != value)
                {
                    _straightBets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of placed parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("parlayBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ParlayBet> ParlayBets
        {
            get { return _parlayBets; }
            set 
            {
                if (_parlayBets != value)
                {
                    _parlayBets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of placed teaser bets.</summary>
        [Newtonsoft.Json.JsonProperty("teaserBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<TeaserBet> TeaserBets
        {
            get { return _teaserBets; }
            set 
            {
                if (_teaserBets != value)
                {
                    _teaserBets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of placed special bets.</summary>
        [Newtonsoft.Json.JsonProperty("specialBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<SpecialBet> SpecialBets
        {
            get { return _specialBets; }
            set 
            {
                if (_specialBets != value)
                {
                    _specialBets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>A collection of placed manual bets.</summary>
        [Newtonsoft.Json.JsonProperty("manualBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ManualBet> ManualBets
        {
            get { return _manualBets; }
            set 
            {
                if (_manualBets != value)
                {
                    _manualBets = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GetBetsByTypeResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GetBetsByTypeResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserBet : System.ComponentModel.INotifyPropertyChanged
    {
        private long _betId;
        private System.Guid? _uniqueRequestId;
        private int _wagerNumber;
        private System.DateTime _placedAt;
        private TeaserBetBetStatus _betStatus;
        private string _betType = "TEASER";
        private decimal _win;
        private decimal _risk;
        private decimal? _winLoss;
        private OddsFormat _oddsFormat;
        private decimal? _customerCommission;
        private CancellationReason _cancellationReason;
        private long _updateSequence;
        private string _teaserName;
        private bool _isSameEventOnly;
        private decimal _minPicks;
        private decimal _maxPicks;
        private System.Collections.ObjectModel.ObservableCollection<TeaserLeg> _legs = new System.Collections.ObjectModel.ObservableCollection<TeaserLeg>();
    
        /// <summary>Bet identification</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Always)]
        public long BetId
        {
            get { return _betId; }
            set 
            {
                if (_betId != value)
                {
                    _betId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Unique Request Id</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId
        {
            get { return _uniqueRequestId; }
            set 
            {
                if (_uniqueRequestId != value)
                {
                    _uniqueRequestId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("wagerNumber", Required = Newtonsoft.Json.Required.Always)]
        public int WagerNumber
        {
            get { return _wagerNumber; }
            set 
            {
                if (_wagerNumber != value)
                {
                    _wagerNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Date time when the bet was placed.</summary>
        [Newtonsoft.Json.JsonProperty("placedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime PlacedAt
        {
            get { return _placedAt; }
            set 
            {
                if (_placedAt != value)
                {
                    _placedAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Bet Status. 
        /// 
        /// ACCEPTED = Bet was accepted,  
        /// CANCELLED = Bet is cancelled as per Pinnacle betting rules,  
        /// LOSE = The bet is settled as lose,  
        /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status,  
        /// WON = The bet is settled as won 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("betStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserBetBetStatus BetStatus
        {
            get { return _betStatus; }
            set 
            {
                if (_betStatus != value)
                {
                    _betStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BetType
        {
            get { return _betType; }
            set 
            {
                if (_betType != value)
                {
                    _betType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Win amount.</summary>
        [Newtonsoft.Json.JsonProperty("win", Required = Newtonsoft.Json.Required.Always)]
        public decimal Win
        {
            get { return _win; }
            set 
            {
                if (_win != value)
                {
                    _win = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("risk", Required = Newtonsoft.Json.Required.Always)]
        public decimal Risk
        {
            get { return _risk; }
            set 
            {
                if (_risk != value)
                {
                    _risk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Win-Loss for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("winLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? WinLoss
        {
            get { return _winLoss; }
            set 
            {
                if (_winLoss != value)
                {
                    _winLoss = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat OddsFormat
        {
            get { return _oddsFormat; }
            set 
            {
                if (_oddsFormat != value)
                {
                    _oddsFormat = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Client’s commission on the bet.</summary>
        [Newtonsoft.Json.JsonProperty("customerCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? CustomerCommission
        {
            get { return _customerCommission; }
            set 
            {
                if (_customerCommission != value)
                {
                    _customerCommission = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReason CancellationReason
        {
            get { return _cancellationReason; }
            set 
            {
                if (_cancellationReason != value)
                {
                    _cancellationReason = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Update Sequence</summary>
        [Newtonsoft.Json.JsonProperty("updateSequence", Required = Newtonsoft.Json.Required.Default)]
        public long UpdateSequence
        {
            get { return _updateSequence; }
            set 
            {
                if (_updateSequence != value)
                {
                    _updateSequence = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("teaserName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string TeaserName
        {
            get { return _teaserName; }
            set 
            {
                if (_teaserName != value)
                {
                    _teaserName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("isSameEventOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSameEventOnly
        {
            get { return _isSameEventOnly; }
            set 
            {
                if (_isSameEventOnly != value)
                {
                    _isSameEventOnly = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("minPicks", Required = Newtonsoft.Json.Required.Always)]
        public decimal MinPicks
        {
            get { return _minPicks; }
            set 
            {
                if (_minPicks != value)
                {
                    _minPicks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("maxPicks", Required = Newtonsoft.Json.Required.Always)]
        public decimal MaxPicks
        {
            get { return _maxPicks; }
            set 
            {
                if (_maxPicks != value)
                {
                    _maxPicks = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<TeaserLeg> Legs
        {
            get { return _legs; }
            set 
            {
                if (_legs != value)
                {
                    _legs = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserBet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserBet>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ManualBet : System.ComponentModel.INotifyPropertyChanged
    {
        private long _betId;
        private int _wagerNumber;
        private System.DateTime _placedAt;
        private ManualBetBetStatus _betStatus;
        private string _betType = "MANUAL";
        private decimal _win;
        private decimal _risk;
        private decimal? _winLoss;
        private long _updateSequence;
        private string _description;
        private long? _referenceBetId;
    
        /// <summary>Bet identification</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Always)]
        public long BetId
        {
            get { return _betId; }
            set 
            {
                if (_betId != value)
                {
                    _betId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("wagerNumber", Required = Newtonsoft.Json.Required.Always)]
        public int WagerNumber
        {
            get { return _wagerNumber; }
            set 
            {
                if (_wagerNumber != value)
                {
                    _wagerNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Date time when the bet was placed.</summary>
        [Newtonsoft.Json.JsonProperty("placedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTime PlacedAt
        {
            get { return _placedAt; }
            set 
            {
                if (_placedAt != value)
                {
                    _placedAt = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Bet Status. 
        /// 
        /// ACCEPTED = Bet was accepted,  
        /// CANCELLED = Bet is cancelled as per Pinnacle betting rules,  
        /// LOSE = The bet is settled as lose,  
        /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status,  
        /// WON = The bet is settled as won 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("betStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ManualBetBetStatus BetStatus
        {
            get { return _betStatus; }
            set 
            {
                if (_betStatus != value)
                {
                    _betStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BetType
        {
            get { return _betType; }
            set 
            {
                if (_betType != value)
                {
                    _betType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Win amount.</summary>
        [Newtonsoft.Json.JsonProperty("win", Required = Newtonsoft.Json.Required.Always)]
        public decimal Win
        {
            get { return _win; }
            set 
            {
                if (_win != value)
                {
                    _win = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("risk", Required = Newtonsoft.Json.Required.Always)]
        public decimal Risk
        {
            get { return _risk; }
            set 
            {
                if (_risk != value)
                {
                    _risk = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Win-Loss for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("winLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? WinLoss
        {
            get { return _winLoss; }
            set 
            {
                if (_winLoss != value)
                {
                    _winLoss = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Update Sequence</summary>
        [Newtonsoft.Json.JsonProperty("updateSequence", Required = Newtonsoft.Json.Required.Default)]
        public long UpdateSequence
        {
            get { return _updateSequence; }
            set 
            {
                if (_updateSequence != value)
                {
                    _updateSequence = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Manual bet description.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }
            set 
            {
                if (_description != value)
                {
                    _description = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Referenced original bet id.</summary>
        [Newtonsoft.Json.JsonProperty("referenceBetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ReferenceBetId
        {
            get { return _referenceBetId; }
            set 
            {
                if (_referenceBetId != value)
                {
                    _referenceBetId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ManualBet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ManualBet>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TeaserLeg : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _sportId;
        private TeaserLegLegBetType? _legBetType;
        private TeaserLegLegBetStatus? _legBetStatus;
        private int? _leagueId;
        private long? _eventId;
        private string _eventStartTime;
        private decimal? _handicap;
        private string _teamName;
        private TeaserLegSide? _side;
        private string _team1;
        private string _team2;
        private int? _periodNumber;
    
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId
        {
            get { return _sportId; }
            set 
            {
                if (_sportId != value)
                {
                    _sportId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Teaser leg type.</summary>
        [Newtonsoft.Json.JsonProperty("legBetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserLegLegBetType? LegBetType
        {
            get { return _legBetType; }
            set 
            {
                if (_legBetType != value)
                {
                    _legBetType = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>CANCELLED = The leg is canceled- the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,  
        /// LOSE = The leg is a loss or a push-lose. When Push-lose happens, the half of the stake on the leg will be pushed to the next leg, and the other half will be a lose. This can happen only when the leg is placed on a quarter points handicap,  
        /// PUSH = The leg is a push - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,  
        /// REFUNDED = The leg is refunded - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,  
        /// WON = The leg is a won or a push-won. When Push-won happens, the half of the stake on the leg will be pushed to the next leg, and the other half is won. This can happen only when the leg is placed on a quarter points handicap  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legBetStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserLegLegBetStatus? LegBetStatus
        {
            get { return _legBetStatus; }
            set 
            {
                if (_legBetStatus != value)
                {
                    _legBetStatus = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("leagueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeagueId
        {
            get { return _leagueId; }
            set 
            {
                if (_leagueId != value)
                {
                    _leagueId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId
        {
            get { return _eventId; }
            set 
            {
                if (_eventId != value)
                {
                    _eventId = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("eventStartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventStartTime
        {
            get { return _eventStartTime; }
            set 
            {
                if (_eventStartTime != value)
                {
                    _eventStartTime = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Handicap
        {
            get { return _handicap; }
            set 
            {
                if (_handicap != value)
                {
                    _handicap = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeamName
        {
            get { return _teamName; }
            set 
            {
                if (_teamName != value)
                {
                    _teamName = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        /// <summary>Side type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserLegSide? Side
        {
            get { return _side; }
            set 
            {
                if (_side != value)
                {
                    _side = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("team1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team1
        {
            get { return _team1; }
            set 
            {
                if (_team1 != value)
                {
                    _team1 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("team2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team2
        {
            get { return _team2; }
            set 
            {
                if (_team2 != value)
                {
                    _team2 = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber
        {
            get { return _periodNumber; }
            set 
            {
                if (_periodNumber != value)
                {
                    _periodNumber = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static TeaserLeg FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TeaserLeg>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Bet odds format.  
    /// AMERICAN = American odds format,  
    /// DECIMAL = Decimal (European) odds format,  
    /// HONGKONG = Hong Kong odds format,  
    /// INDONESIAN = Indonesian odds format,  
    /// MALAY = Malaysian odds format 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum OddsFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = "AMERICAN")]
        AMERICAN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "DECIMAL")]
        DECIMAL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "HONGKONG")]
        HONGKONG = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "INDONESIAN")]
        INDONESIAN = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "MALAY")]
        MALAY = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BettingStatusResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private BettingStatusResponseStatus _status;
    
        /// <summary>Betting status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BettingStatusResponseStatus Status
        {
            get { return _status; }
            set 
            {
                if (_status != value)
                {
                    _status = value; 
                    RaisePropertyChanged();
                }
            }
        }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static BettingStatusResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BettingStatusResponse>(data);
        }
    
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null) 
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
    
    /// <summary>Type of bet list to return. Not needed when betids is submitted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Betlist
    {
        [System.Runtime.Serialization.EnumMember(Value = "SETTLED")]
        SETTLED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "RUNNING")]
        RUNNING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "CANCELLED")]
        CANCELLED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlaceBetRequestWinRiskStake
    {
        [System.Runtime.Serialization.EnumMember(Value = "WIN")]
        WIN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "RISK")]
        RISK = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlaceBetRequestFillType
    {
        [System.Runtime.Serialization.EnumMember(Value = "NORMAL")]
        NORMAL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "FILLANDKILL")]
        FILLANDKILL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "FILLMAXLIMIT")]
        FILLMAXLIMIT = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlaceBetRequestBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "MONEYLINE")]
        MONEYLINE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TEAM_TOTAL_POINTS")]
        TEAM_TOTAL_POINTS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SPREAD")]
        SPREAD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOTAL_POINTS")]
        TOTAL_POINTS = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlaceBetRequestTeam
    {
        [System.Runtime.Serialization.EnumMember(Value = "TEAM1")]
        TEAM1 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TEAM2")]
        TEAM2 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "DRAW")]
        DRAW = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlaceBetRequestSide
    {
        [System.Runtime.Serialization.EnumMember(Value = "OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlaceBetResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PENDING_ACCEPTANCE")]
        PENDING_ACCEPTANCE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlaceBetResponseErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "ALL_BETTING_CLOSED")]
        ALL_BETTING_CLOSED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ALL_LIVE_BETTING_CLOSED")]
        ALL_LIVE_BETTING_CLOSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ABOVE_EVENT_MAX")]
        ABOVE_EVENT_MAX = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ABOVE_MAX_BET_AMOUNT")]
        ABOVE_MAX_BET_AMOUNT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "BELOW_MIN_BET_AMOUNT")]
        BELOW_MIN_BET_AMOUNT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "BLOCKED_BETTING")]
        BLOCKED_BETTING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "BLOCKED_CLIENT")]
        BLOCKED_CLIENT = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "INSUFFICIENT_FUNDS")]
        INSUFFICIENT_FUNDS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_COUNTRY")]
        INVALID_COUNTRY = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_EVENT")]
        INVALID_EVENT = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_ODDS_FORMAT")]
        INVALID_ODDS_FORMAT = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "LINE_CHANGED")]
        LINE_CHANGED = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "LISTED_PITCHERS_SELECTION_ERROR")]
        LISTED_PITCHERS_SELECTION_ERROR = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "OFFLINE_EVENT")]
        OFFLINE_EVENT = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "PAST_CUTOFFTIME")]
        PAST_CUTOFFTIME = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "RED_CARDS_CHANGED")]
        RED_CARDS_CHANGED = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "SCORE_CHANGED")]
        SCORE_CHANGED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_RESTRICTION")]
        TIME_RESTRICTION = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "DUPLICATE_UNIQUE_REQUEST_ID")]
        DUPLICATE_UNIQUE_REQUEST_ID = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "INCOMPLETE_CUSTOMER_BETTING_PROFILE")]
        INCOMPLETE_CUSTOMER_BETTING_PROFILE = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_CUSTOMER_PROFILE")]
        INVALID_CUSTOMER_PROFILE = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = "LIMITS_CONFIGURATION_ISSUE")]
        LIMITS_CONFIGURATION_ISSUE = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESUBMIT_REQUEST")]
        RESUBMIT_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_ERROR_3")]
        SYSTEM_ERROR_3 = 25,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ErrorResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_REQUEST_DATA")]
        INVALID_REQUEST_DATA = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_CREDENTIALS")]
        INVALID_CREDENTIALS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_AUTHORIZATION_HEADER")]
        INVALID_AUTHORIZATION_HEADER = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ACCOUNT_INACTIVE")]
        ACCOUNT_INACTIVE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "NO_API_ACCESS")]
        NO_API_ACCESS = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlaceBetResponseV2Status
    {
        [System.Runtime.Serialization.EnumMember(Value = "ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PENDING_ACCEPTANCE")]
        PENDING_ACCEPTANCE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlaceBetResponseV2ErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "ALL_BETTING_CLOSED")]
        ALL_BETTING_CLOSED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ALL_LIVE_BETTING_CLOSED")]
        ALL_LIVE_BETTING_CLOSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ABOVE_EVENT_MAX")]
        ABOVE_EVENT_MAX = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "ABOVE_MAX_BET_AMOUNT")]
        ABOVE_MAX_BET_AMOUNT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "BELOW_MIN_BET_AMOUNT")]
        BELOW_MIN_BET_AMOUNT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "BLOCKED_BETTING")]
        BLOCKED_BETTING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "BLOCKED_CLIENT")]
        BLOCKED_CLIENT = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "INSUFFICIENT_FUNDS")]
        INSUFFICIENT_FUNDS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_COUNTRY")]
        INVALID_COUNTRY = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_EVENT")]
        INVALID_EVENT = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_ODDS_FORMAT")]
        INVALID_ODDS_FORMAT = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "LINE_CHANGED")]
        LINE_CHANGED = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "LISTED_PITCHERS_SELECTION_ERROR")]
        LISTED_PITCHERS_SELECTION_ERROR = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "OFFLINE_EVENT")]
        OFFLINE_EVENT = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "PAST_CUTOFFTIME")]
        PAST_CUTOFFTIME = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "RED_CARDS_CHANGED")]
        RED_CARDS_CHANGED = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "SCORE_CHANGED")]
        SCORE_CHANGED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "TIME_RESTRICTION")]
        TIME_RESTRICTION = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "DUPLICATE_UNIQUE_REQUEST_ID")]
        DUPLICATE_UNIQUE_REQUEST_ID = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "INCOMPLETE_CUSTOMER_BETTING_PROFILE")]
        INCOMPLETE_CUSTOMER_BETTING_PROFILE = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_CUSTOMER_PROFILE")]
        INVALID_CUSTOMER_PROFILE = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = "LIMITS_CONFIGURATION_ISSUE")]
        LIMITS_CONFIGURATION_ISSUE = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESUBMIT_REQUEST")]
        RESUBMIT_REQUEST = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_ERROR_3")]
        SYSTEM_ERROR_3 = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = "LICENCE_RESTRICTION_LIVE_BETTING_BLOCKED")]
        LICENCE_RESTRICTION_LIVE_BETTING_BLOCKED = 26,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StraightBetBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CANCELLED")]
        CANCELLED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "LOSE")]
        LOSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "PENDING_ACCEPTANCE")]
        PENDING_ACCEPTANCE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "REFUNDED")]
        REFUNDED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "NOT_ACCEPTED")]
        NOT_ACCEPTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "WON")]
        WON = 6,

        [System.Runtime.Serialization.EnumMember(Value = "REJECTED")]
        REJECTED = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StraightBetBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "MONEYLINE")]
        MONEYLINE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TEAM_TOTAL_POINTS")]
        TEAM_TOTAL_POINTS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "SPREAD")]
        SPREAD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOTAL_POINTS")]
        TOTAL_POINTS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "SPECIAL")]
        SPECIAL = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "PARLAY")]
        PARLAY = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "TEASER")]
        TEASER = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "MANUAL")]
        MANUAL = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StraightBetSide
    {
        [System.Runtime.Serialization.EnumMember(Value = "OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StraightBetPitcher1MustStart
    {
        [System.Runtime.Serialization.EnumMember(Value = "True")]
        True = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "False")]
        False = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StraightBetPitcher2MustStart
    {
        [System.Runtime.Serialization.EnumMember(Value = "True")]
        True = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "False")]
        False = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum StraightBetIsLive
    {
        [System.Runtime.Serialization.EnumMember(Value = "True")]
        True = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "False")]
        False = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = "Parlay")]
        Parlay = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TwoLegRoundRobin")]
        TwoLegRoundRobin = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ThreeLegRoundRobin")]
        ThreeLegRoundRobin = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "FourLegRoundRobin")]
        FourLegRoundRobin = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "FiveLegRoundRobin")]
        FiveLegRoundRobin = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "SixLegRoundRobin")]
        SixLegRoundRobin = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "SevenLegRoundRobin")]
        SevenLegRoundRobin = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "EightLegRoundRobin")]
        EightLegRoundRobin = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLegRequestLegBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "MONEYLINE")]
        MONEYLINE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SPREAD")]
        SPREAD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOTAL_POINTS")]
        TOTAL_POINTS = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLegRequestSide
    {
        [System.Runtime.Serialization.EnumMember(Value = "OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlaceParlayBetResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlaceParlayBetResponseErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "ABOVE_MAX_BET_AMOUNT")]
        ABOVE_MAX_BET_AMOUNT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ALL_BETTING_CLOSED")]
        ALL_BETTING_CLOSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "BELOW_MIN_BET_AMOUNT")]
        BELOW_MIN_BET_AMOUNT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "BLOCKED_BETTING")]
        BLOCKED_BETTING = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "BLOCKED_CLIENT")]
        BLOCKED_CLIENT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "INSUFFICIENT_FUNDS")]
        INSUFFICIENT_FUNDS = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_COUNTRY")]
        INVALID_COUNTRY = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_LEGS")]
        INVALID_LEGS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_ODDS_FORMAT")]
        INVALID_ODDS_FORMAT = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_ROUND_ROBIN_OPTIONS")]
        INVALID_ROUND_ROBIN_OPTIONS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "ROUND_ROBIN_DISALLOWED")]
        ROUND_ROBIN_DISALLOWED = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOO_MANY_LEGS")]
        TOO_MANY_LEGS = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOO_FEW_LEGS")]
        TOO_FEW_LEGS = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_REQUEST")]
        INVALID_REQUEST = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "DUPLICATE_UNIQUE_REQUEST_ID")]
        DUPLICATE_UNIQUE_REQUEST_ID = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_ERROR_3")]
        SYSTEM_ERROR_3 = 17,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RoundRobinOptionWithOddsRoundRobinOption
    {
        [System.Runtime.Serialization.EnumMember(Value = "Parlay")]
        Parlay = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TwoLegRoundRobin")]
        TwoLegRoundRobin = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ThreeLegRoundRobin")]
        ThreeLegRoundRobin = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "FourLegRoundRobin")]
        FourLegRoundRobin = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "FiveLegRoundRobin")]
        FiveLegRoundRobin = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "SixLegRoundRobin")]
        SixLegRoundRobin = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "SevenLegRoundRobin")]
        SevenLegRoundRobin = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "EightLegRoundRobin")]
        EightLegRoundRobin = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLegResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "VALID")]
        VALID = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLegResponseErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "CANNOT_PARLAY_LIVE_GAME")]
        CANNOT_PARLAY_LIVE_GAME = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CORRELATED")]
        CORRELATED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "EVENT_NO_LONGER_AVAILABLE_FOR_BETTING")]
        EVENT_NO_LONGER_AVAILABLE_FOR_BETTING = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "EVENT_NOT_OFFERED_FOR_PARLAY")]
        EVENT_NOT_OFFERED_FOR_PARLAY = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_EVENT")]
        INVALID_EVENT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_LEG_BET_TYPE")]
        INVALID_LEG_BET_TYPE = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_PARLAY_BET")]
        INVALID_PARLAY_BET = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "LINE_CHANGED")]
        LINE_CHANGED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "LINE_DOES_NOT_BELONG_TO_EVENT")]
        LINE_DOES_NOT_BELONG_TO_EVENT = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "LISTED_PITCHERS_SELECTION_ERROR")]
        LISTED_PITCHERS_SELECTION_ERROR = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "ODDS_NO_LONGER_OFFERED_FOR_PARLAY_1")]
        ODDS_NO_LONGER_OFFERED_FOR_PARLAY_1 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "ODDS_NO_LONGER_OFFERED_FOR_PARLAY_2")]
        ODDS_NO_LONGER_OFFERED_FOR_PARLAY_2 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "ODDS_NO_LONGER_OFFERED_FOR_PARLAY_3")]
        ODDS_NO_LONGER_OFFERED_FOR_PARLAY_3 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "OFFLINE_EVENT")]
        OFFLINE_EVENT = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "PAST_CUTOFFTIME")]
        PAST_CUTOFFTIME = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_ERROR_1")]
        SYSTEM_ERROR_1 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_ERROR_2")]
        SYSTEM_ERROR_2 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_ERROR_3")]
        SYSTEM_ERROR_3 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "LINE_IS_NOT_AVAILABLE")]
        LINE_IS_NOT_AVAILABLE = 18,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayBetBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CANCELLED")]
        CANCELLED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "LOSE")]
        LOSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "PENDING_ACCEPTANCE")]
        PENDING_ACCEPTANCE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "REFUNDED")]
        REFUNDED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "NOT_ACCEPTED")]
        NOT_ACCEPTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "WON")]
        WON = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLegLegBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "MONEYLINE")]
        MONEYLINE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "SPREAD")]
        SPREAD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOTAL_POINTS")]
        TOTAL_POINTS = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLegLegBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "CANCELLED")]
        CANCELLED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "LOSE")]
        LOSE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "PUSH")]
        PUSH = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "REFUNDED")]
        REFUNDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "WON")]
        WON = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "ACCEPTED")]
        ACCEPTED = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ParlayLegSide
    {
        [System.Runtime.Serialization.EnumMember(Value = "OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TeaserBetLegBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "SPREAD")]
        SPREAD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOTAL_POINTS")]
        TOTAL_POINTS = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TeaserBetLegSide
    {
        [System.Runtime.Serialization.EnumMember(Value = "OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlaceTeaserBetResponseErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "ABOVE_MAX_BET_AMOUNT")]
        ABOVE_MAX_BET_AMOUNT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ALL_BETTING_CLOSED")]
        ALL_BETTING_CLOSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "BELOW_MIN_BET_AMOUNT")]
        BELOW_MIN_BET_AMOUNT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "BLOCKED_BETTING")]
        BLOCKED_BETTING = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "BLOCKED_CLIENT")]
        BLOCKED_CLIENT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "DOUBLE_HIT")]
        DOUBLE_HIT = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "DUPLICATE_CLIENT_REFERENCE_ID")]
        DUPLICATE_CLIENT_REFERENCE_ID = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "INCOMPLETE_CUSTOMER_BETTING_PROFILE")]
        INCOMPLETE_CUSTOMER_BETTING_PROFILE = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "INSUFFICIENT_FUNDS")]
        INSUFFICIENT_FUNDS = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_COUNTRY")]
        INVALID_COUNTRY = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_CUSTOMER_PROFILE")]
        INVALID_CUSTOMER_PROFILE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_LEGS")]
        INVALID_LEGS = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_REQUEST")]
        INVALID_REQUEST = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "ODDS_FORMAT_MISMATCH")]
        ODDS_FORMAT_MISMATCH = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESUBMIT_REQUEST")]
        RESUBMIT_REQUEST = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "TEASER_DOES_NOT_EXIST")]
        TEASER_DOES_NOT_EXIST = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "SAME_EVENT_ONLY_REQUIRED")]
        SAME_EVENT_ONLY_REQUIRED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_ERROR_1")]
        SYSTEM_ERROR_1 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_ERROR_2")]
        SYSTEM_ERROR_2 = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_ERROR_3")]
        SYSTEM_ERROR_3 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOO_FEW_LEGS")]
        TOO_FEW_LEGS = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOO_MANY_LEGS")]
        TOO_MANY_LEGS = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = "DUPLICATE_UNIQUE_REQUEST_ID")]
        DUPLICATE_UNIQUE_REQUEST_ID = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = 24,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PlaceTeaserBetLegResponseErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "CANNOT_TEASER_LIVE_GAME")]
        CANNOT_TEASER_LIVE_GAME = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CHECK_TEASER_ERROR")]
        CHECK_TEASER_ERROR = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_EVENT")]
        INVALID_EVENT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_LEG_BET")]
        INVALID_LEG_BET = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_LEG_BET_TYPE")]
        INVALID_LEG_BET_TYPE = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "LINE_CHANGED")]
        LINE_CHANGED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "LINE_DOES_NOT_BELONG_TO_EVENT")]
        LINE_DOES_NOT_BELONG_TO_EVENT = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "OFFLINE_EVENT")]
        OFFLINE_EVENT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "PAST_CUTOFFTIME")]
        PAST_CUTOFFTIME = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "POINTS_ARE_NOT_ADJUSTED")]
        POINTS_ARE_NOT_ADJUSTED = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_ERROR_1")]
        SYSTEM_ERROR_1 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_ERROR_2")]
        SYSTEM_ERROR_2 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "WAGER_DATA_MISSING")]
        WAGER_DATA_MISSING = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "LINE_IS_NOT_AVAILABLE")]
        LINE_IS_NOT_AVAILABLE = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SpecialBetRequestWinRiskStake
    {
        [System.Runtime.Serialization.EnumMember(Value = "WIN")]
        WIN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "RISK")]
        RISK = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SpecialBetResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SpecialBetResponseErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = "ALL_BETTING_CLOSED")]
        ALL_BETTING_CLOSED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ABOVE_MAX_BET_AMOUNT")]
        ABOVE_MAX_BET_AMOUNT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "BELOW_MIN_BET_AMOUNT")]
        BELOW_MIN_BET_AMOUNT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "BLOCKED_BETTING")]
        BLOCKED_BETTING = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "BLOCKED_CLIENT")]
        BLOCKED_CLIENT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = "CONTEST_NOT_FOUND")]
        CONTEST_NOT_FOUND = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = "DUPLICATE_UNIQUE_REQUEST_ID")]
        DUPLICATE_UNIQUE_REQUEST_ID = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = "INCOMPLETE_CUSTOMER_BETTING_PROFILE")]
        INCOMPLETE_CUSTOMER_BETTING_PROFILE = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = "INSUFFICIENT_FUNDS")]
        INSUFFICIENT_FUNDS = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_COUNTRY")]
        INVALID_COUNTRY = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_REQUEST")]
        INVALID_REQUEST = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = "LINE_CHANGED")]
        LINE_CHANGED = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = "PAST_CUTOFFTIME")]
        PAST_CUTOFFTIME = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = "RESUBMIT_REQUEST")]
        RESUBMIT_REQUEST = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_ERROR_1")]
        SYSTEM_ERROR_1 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = "SYSTEM_ERROR_2")]
        SYSTEM_ERROR_2 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = "UNIQUE_REQUEST_ID_REQUIRED")]
        UNIQUE_REQUEST_ID_REQUIRED = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = "INVALID_CUSTOMER_PROFILE")]
        INVALID_CUSTOMER_PROFILE = 19,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum SpecialBetBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CANCELLED")]
        CANCELLED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "LOSE")]
        LOSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "REFUNDED")]
        REFUNDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "WON")]
        WON = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TeaserBetBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CANCELLED")]
        CANCELLED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "LOSE")]
        LOSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "REFUNDED")]
        REFUNDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "WON")]
        WON = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ManualBetBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "CANCELLED")]
        CANCELLED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "LOSE")]
        LOSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "REFUNDED")]
        REFUNDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "WON")]
        WON = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TeaserLegLegBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = "SPREAD")]
        SPREAD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "TOTAL_POINTS")]
        TOTAL_POINTS = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TeaserLegLegBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "CANCELLED")]
        CANCELLED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "LOSE")]
        LOSE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "PUSH")]
        PUSH = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = "REFUNDED")]
        REFUNDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = "WON")]
        WON = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TeaserLegSide
    {
        [System.Runtime.Serialization.EnumMember(Value = "OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.21.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BettingStatusResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = "ALL_BETTING_ENABLED")]
        ALL_BETTING_ENABLED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "ALL_LIVE_BETTING_CLOSED")]
        ALL_LIVE_BETTING_CLOSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "ALL_BETTING_CLOSED")]
        ALL_BETTING_CLOSED = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.13.2.0 (NJsonSchema v9.10.21.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.13.2.0 (NJsonSchema v9.10.21.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}